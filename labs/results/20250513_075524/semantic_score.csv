Semantic-Score,Code,Original-Comment,Agent-Comment,Filename,Agent-Commit
0.62947315,def open_resource,"""""""Open a resource file relative to :attr:`root_path` for reading.

        For example, if the file ``schema.sql`` is next to the file
        ``app.py`` where the ``Flask`` app is defined, it can be opened
        with:

        .. code-block:: python

            with app.open_resource(""schema.sql"") as f:
                conn.executescript(f.read())

        :param resource: Path to the resource relative to :attr:`root_path`.
        :param mode: Open the file in this mode. Only reading is supported,
            valid values are ``""r""`` (or ``""rt""``) and ``""rb""``.
        :param encoding: Open the file with this encoding when opening in text
            mode. This is ignored when opening in binary mode.

        .. versionchanged:: 3.1
            Added the ``encoding`` parameter.
        """"""","""""""
Opens a resource file.

Args:
    - `resource` (str): The path to the resource file.
    - `mode` (str, optional): The mode in which to open the file. Defaults to ""rb"". Supported modes are ""r"", ""rt"", and ""rb"".
    - `encoding` (str | None, optional): The encoding to use when opening the file. Defaults to None.

Returns:
    t.IO[t.AnyStr]: A file object opened in the specified mode.

Raises:
    ValueError: If the mode is not one of ""r"", ""rt"", or ""rb"".
""""""",src/flask/app.py,bcd1e85598d6b4a3f76fe1423ce9235549a519c7
0.5629455,def open_resource,"""""""Open a resource file relative to :attr:`root_path` for reading. The
        blueprint-relative equivalent of the app's :meth:`~.Flask.open_resource`
        method.

        :param resource: Path to the resource relative to :attr:`root_path`.
        :param mode: Open the file in this mode. Only reading is supported,
            valid values are ``""r""`` (or ``""rt""``) and ``""rb""``.
        :param encoding: Open the file with this encoding when opening in text
            mode. This is ignored when opening in binary mode.

        .. versionchanged:: 3.1
            Added the ``encoding`` parameter.
        """"""","""""""
Opens a resource file in the specified mode.

Args:
    - `resource` (str): The path to the resource file.
    - `mode` (str, optional): The mode in which to open the file. Defaults to ""rb"". Supported modes are ""r"", ""rt"", and ""rb"".
    - `encoding` (str, optional): The encoding to use when opening the file. Defaults to ""utf-8"".

Returns:
    A file-like object opened in the specified mode.

Raises:
    ValueError: If an unsupported mode is provided.
""""""",src/flask/blueprints.py,bcd1e85598d6b4a3f76fe1423ce9235549a519c7
0.67632276,def load_app,"""""""Loads the Flask app (if not yet loaded) and returns it.  Calling
        this multiple times will just result in the already loaded app to
        be returned.
        """"""","""""""
Loads a Flask application instance.

This method attempts to load an existing Flask application from various sources,
including environment variables, command-line options, and file imports. If no
application can be found, it raises a `NoAppException`.

If the `set_debug_flag` attribute is set, the loaded application's debug flag
is updated through the descriptor.

Returns:
    The loaded Flask application instance.
Raises:
    NoAppException: If no Flask application can be located.
""""""",src/flask/cli.py,bcd1e85598d6b4a3f76fe1423ce9235549a519c7
0.5936327,def from_prefixed_env,"""""""Load any environment variables that start with ``FLASK_``,
        dropping the prefix from the env key for the config key. Values
        are passed through a loading function to attempt to convert them
        to more specific types than strings.

        Keys are loaded in :func:`sorted` order.

        The default loading function attempts to parse values as any
        valid JSON type, including dicts and lists.

        Specific items in nested dicts can be set by separating the
        keys with double underscores (``__``). If an intermediate key
        doesn't exist, it will be initialized to an empty dict.

        :param prefix: Load env vars that start with this prefix,
            separated with an underscore (``_``).
        :param loads: Pass each string value to this function and use
            the returned value as the config value. If any error is
            raised it is ignored and the value remains a string. The
            default is :func:`json.loads`.

        .. versionadded:: 2.1
        """"""","""""""
Loads environment variables into a nested dictionary structure.

This function iterates over the environment variables and their values. If a variable's key starts with the specified prefix, it is added to the dictionary. The function handles nested dictionaries by splitting the key at ""__"" and traversing down the dictionary tree.

Args:
    self: The object that will store the loaded environment variables.
    prefix (str): The prefix used to identify environment variables. Defaults to ""FLASK"".
    loads (callable): A function used to load the value of an environment variable. Defaults to json.loads.

Returns:
    bool: Always returns True, as this is a method of a class and its return type is not specified.
""""""",src/flask/config.py,1c4f3c1360d29e60e62bf5c296aa0a36ed19742c
0.5454146,def max_content_length,"""""""The maximum number of bytes that will be read during this request. If
        this limit is exceeded, a 413 :exc:`~werkzeug.exceptions.RequestEntityTooLarge`
        error is raised. If it is set to ``None``, no limit is enforced at the
        Flask application level. However, if it is ``None`` and the request has
        no ``Content-Length`` header and the WSGI server does not indicate that
        it terminates the stream, then no data is read to avoid an infinite
        stream.

        Each request defaults to the :data:`MAX_CONTENT_LENGTH` config, which
        defaults to ``None``. It can be set on a specific ``request`` to apply
        the limit to that specific view. This should be set appropriately based
        on an application's or view's specific needs.

        .. versionchanged:: 3.1
            This can be set per-request.

        .. versionchanged:: 0.6
            This is configurable through Flask config.
        """"""","""""""
Returns the maximum allowed content length.

If a custom value has been set through `self._max_content_length`, it is returned.
Otherwise, if an application context is available (`current_app`), the configuration value ""MAX_CONTENT_LENGTH"" is used. Otherwise, the default behavior of the parent class is called.

Returns:
    int | None: The maximum allowed content length or None if not set.
""""""",src/flask/wrappers.py,339846ee6235d295f446201806046d7c9a7c8acf
0.5825734,def max_content_length,"""""""The maximum number of bytes that will be read during this request. If
        this limit is exceeded, a 413 :exc:`~werkzeug.exceptions.RequestEntityTooLarge`
        error is raised. If it is set to ``None``, no limit is enforced at the
        Flask application level. However, if it is ``None`` and the request has
        no ``Content-Length`` header and the WSGI server does not indicate that
        it terminates the stream, then no data is read to avoid an infinite
        stream.

        Each request defaults to the :data:`MAX_CONTENT_LENGTH` config, which
        defaults to ``None``. It can be set on a specific ``request`` to apply
        the limit to that specific view. This should be set appropriately based
        on an application's or view's specific needs.

        .. versionchanged:: 3.1
            This can be set per-request.

        .. versionchanged:: 0.6
            This is configurable through Flask config.
        """"""","""""""
Sets the maximum content length.

This method sets the maximum allowed length of content. The provided `value` parameter is used to set this limit.
 
Parameters:
    value (int | None): The maximum allowed content length. If None, there is no limit.
 
Returns:
    None
""""""",src/flask/wrappers.py,339846ee6235d295f446201806046d7c9a7c8acf
0.49433872,def max_form_memory_size,"""""""The maximum size in bytes any non-file form field may be in a
        ``multipart/form-data`` body. If this limit is exceeded, a 413
        :exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it
        is set to ``None``, no limit is enforced at the Flask application level.

        Each request defaults to the :data:`MAX_FORM_MEMORY_SIZE` config, which
        defaults to ``500_000``. It can be set on a specific ``request`` to
        apply the limit to that specific view. This should be set appropriately
        based on an application's or view's specific needs.

        .. versionchanged:: 3.1
            This is configurable through Flask config.
        """"""","""""""
Sets the maximum form memory size.

This method sets the maximum amount of memory that can be allocated to a form.
It does not return any value and is intended for internal use only.

Args:
    value (int | None): The maximum form memory size. If None, no limit is set.

Raises:
    TypeError: If the input value is not an integer or None.

Note:
This method should be called before any forms are created to ensure that
the system has enough memory allocated for them.
""""""",src/flask/wrappers.py,339846ee6235d295f446201806046d7c9a7c8acf
0.5376739,def max_form_parts,"""""""The maximum number of fields that may be present in a
        ``multipart/form-data`` body. If this limit is exceeded, a 413
        :exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it
        is set to ``None``, no limit is enforced at the Flask application level.

        Each request defaults to the :data:`MAX_FORM_PARTS` config, which
        defaults to ``1_000``. It can be set on a specific ``request`` to apply
        the limit to that specific view. This should be set appropriately based
        on an application's or view's specific needs.

        .. versionchanged:: 3.1
            This is configurable through Flask config.
        """"""","""""""
Returns the maximum number of form parts allowed.

If `self._max_form_parts` is set, returns its value. Otherwise, checks if a
current application context exists and returns the configured maximum form
parts from it. If no current application context is available, falls back to
the parent class's implementation.

Returns:
    int | None: The maximum number of form parts allowed, or None if not
        applicable.
""""""",src/flask/wrappers.py,339846ee6235d295f446201806046d7c9a7c8acf
0.5111278,def max_form_parts,"""""""The maximum number of fields that may be present in a
        ``multipart/form-data`` body. If this limit is exceeded, a 413
        :exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it
        is set to ``None``, no limit is enforced at the Flask application level.

        Each request defaults to the :data:`MAX_FORM_PARTS` config, which
        defaults to ``1_000``. It can be set on a specific ``request`` to apply
        the limit to that specific view. This should be set appropriately based
        on an application's or view's specific needs.

        .. versionchanged:: 3.1
            This is configurable through Flask config.
        """"""","""""""
Returns the maximum number of form parts that can be created with a given value.

Args:
    value (int | None): The maximum value for form parts. If None, no limit is imposed.

Returns:
    None: This function does not return any value.
""""""",src/flask/wrappers.py,339846ee6235d295f446201806046d7c9a7c8acf
