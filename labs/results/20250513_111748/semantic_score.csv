Semantic-Score,Code,Original-Comment,Agent-Comment,Filename,Agent-Commit
0.5562934,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session cookie to the client's browser.

This method sets a session cookie based on the provided `app`, `session`, and `response` objects.
It determines the necessary cookie attributes (name, domain, path, secure, samesite, httponly) using
the `get_cookie_name`, `get_cookie_domain`, `get_cookie_path`, `get_cookie_secure`, 
`get_cookie_samesite`, and `get_cookie_httponly` methods.

If the session was accessed at all, it adds a ""Vary: Cookie"" header to the response.
If the session is empty or modified to be empty, it removes the cookie from the response.
Otherwise, it sets the cookie with the determined attributes and adds a ""Vary: Cookie"" header.

Parameters:
app (Flask): The Flask application instance.
session (SessionMixin): The session object being saved.
response (Response): The HTTP response object.

Returns:
None
""""""",src/flask/sessions.py,783d20111c26231dde06b823811411e33e47ff02
0.6832959,def make_null_session,"""""""Creates a null session which acts as a replacement object if the
        real session support could not be loaded due to a configuration
        error.  This mainly aids the user experience because the job of the
        null session is to still support lookup without complaining but
        modifications are answered with a helpful error message of what
        failed.

        This creates an instance of :attr:`null_session_class` by default.
        """"""","""""""
Creates and returns a null session instance for the given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    NullSession: A null session instance.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.6895287,def get_cookie_name,"""""""The name of the session cookie. Uses``app.config[""SESSION_COOKIE_NAME""]``.""""""","""""""
Returns the name of the cookie used to store session data in a Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    str: The name of the session cookie.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.68853897,def get_cookie_path,"""""""Returns the path for which the cookie should be valid.  The
        default implementation uses the value from the ``SESSION_COOKIE_PATH``
        config var if it's set, and falls back to ``APPLICATION_ROOT`` or
        uses ``/`` if it's ``None``.
        """"""","""""""
Returns the path of the cookie used by a Flask application.

If 'SESSION_COOKIE_PATH' is set in the application's configuration,
its value will be returned. Otherwise, the value of
'APPLICATION_ROOT' will be used as a fallback.

Args:
    app (Flask): The Flask application instance.

Returns:
    str: The path of the cookie.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.7083045,def get_cookie_httponly,"""""""Returns True if the session cookie should be httponly.  This
        currently just returns the value of the ``SESSION_COOKIE_HTTPONLY``
        config var.
        """"""","""""""
Returns whether the session cookie is set to be HTTP-only in the given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    bool: True if the session cookie is HTTP-only, False otherwise.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.7656,def get_cookie_secure,"""""""Returns True if the cookie should be secure.  This currently
        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.
        """"""","""""""
Returns whether the session cookie is secure.

This method checks if the `SESSION_COOKIE_SECURE` configuration variable
is set to True in the Flask application's configuration. If it is, the
session cookie will be transmitted over a secure protocol (HTTPS).

Args:
    app: The Flask application instance.

Returns:
    bool: Whether the session cookie is secure.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.5735377,def get_cookie_samesite,"""""""Return ``'Strict'`` or ``'Lax'`` if the cookie should use the
        ``SameSite`` attribute. This currently just returns the value of
        the :data:`SESSION_COOKIE_SAMESITE` setting.
        """"""","""""""
Returns the value of the `SESSION_COOKIE_SAMESITE` configuration option from the provided Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    str: The value of the `SESSION_COOKIE_SAMESITE` configuration option.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.6405388,def get_expiration_time,"""""""A helper method that returns an expiration date for the session
        or ``None`` if the session is linked to the browser session.  The
        default implementation returns now + the permanent session
        lifetime configured on the application.
        """"""","""""""
Returns the expiration time of a Flask session.

If the session is permanent, returns the current UTC time plus the permanent session lifetime.
Otherwise, returns None.

Args:
    self: The instance of the class that this method belongs to (not used in this implementation).
    app: A Flask application object.
    session: A SessionMixin object representing the session.

Returns:
    datetime: The expiration time of the session, or None if the session is not permanent.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.5696326,def open_session,"""""""This is called at the beginning of each request, after
        pushing the request context, before matching the URL.

        This must return an object which implements a dictionary-like
        interface as well as the :class:`SessionMixin` interface.

        This will return ``None`` to indicate that loading failed in
        some way that is not immediately an error. The request
        context will fall back to using :meth:`make_null_session`
        in this case.
        """"""","""""""
Opens a new session for the given Flask application and request.

Args:
    - `app`: The Flask application instance.
    - `request`: The HTTP request object.

Returns:
    An optional SessionMixin object, indicating whether a session was successfully opened. If not implemented by subclasses, raises NotImplementedError.

Raises:
    NotImplementedError: If the method is not implemented by subclasses.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.47505915,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session.

This method is intended to be overridden by subclasses. It takes in the Flask application,
the session object, and the response object as parameters. The implementation of this
method should be provided by the subclass.

Parameters:
app (Flask): The Flask application instance.
session (SessionMixin): The session object.
response (Response): The response object.

Returns:
None

Raises:
NotImplementedError: This method is intended to be overridden and should not be called directly.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.49295735,def open_session,"""""""This is called at the beginning of each request, after
        pushing the request context, before matching the URL.

        This must return an object which implements a dictionary-like
        interface as well as the :class:`SessionMixin` interface.

        This will return ``None`` to indicate that loading failed in
        some way that is not immediately an error. The request
        context will fall back to using :meth:`make_null_session`
        in this case.
        """"""","""""""
Opens a new session for the given Flask application and request.

Args:
    app (Flask): The Flask application instance.
    request (Request): The HTTP request object.

Returns:
    t.Optional[SecureCookieSession]: The opened session, or None if creation fails.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.50979596,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session cookie to the client's browser.

This method sets a session cookie based on the provided `app`, `session`, and `response` objects.
It determines the necessary cookie attributes (name, domain, path, secure, samesite, httponly) using
the `get_cookie_name`, `get_cookie_domain`, `get_cookie_path`, `get_cookie_secure`, 
`get_cookie_samesite`, and `get_cookie_httponly` methods.

Parameters:
app (Flask): The Flask application instance.
session (SessionMixin): The session object being saved.
response (Response): The HTTP response object.

Returns:
None
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.61847794,def make_null_session,"""""""Creates a null session which acts as a replacement object if the
        real session support could not be loaded due to a configuration
        error.  This mainly aids the user experience because the job of the
        null session is to still support lookup without complaining but
        modifications are answered with a helpful error message of what
        failed.

        This creates an instance of :attr:`null_session_class` by default.
        """"""","""""""
Creates and returns a null session instance for the given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    NullSession: A null session instance.

Raises:
    TypeError: If the provided `app` is not an instance of Flask.

Note:
This method creates a new instance of the `NullSession` class, which does not store any data. It is intended for use in testing or other scenarios where no session data needs to be stored.
""""""",src/flask/sessions.py,223f05ba6a9f2fdf4bdbbb8072a3526458363344
0.59373665,def get_cookie_domain,"""""""The value of the ``Domain`` parameter on the session cookie. If not set,
        browsers will only send the cookie to the exact domain it was set from.
        Otherwise, they will send it to any subdomain of the given value as well.

        Uses the :data:`SESSION_COOKIE_DOMAIN` config.

        .. versionchanged:: 2.3
            Not set by default, does not fall back to ``SERVER_NAME``.
        """"""","""""""
Returns the domain of the session cookie from a given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    str | None: The domain of the session cookie, or None if not set.
""""""",src/flask/sessions.py,223f05ba6a9f2fdf4bdbbb8072a3526458363344
0.7656,def get_cookie_secure,"""""""Returns True if the cookie should be secure.  This currently
        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.
        """"""","""""""
Returns whether the session cookie is secure.

This method checks if the `SESSION_COOKIE_SECURE` configuration variable
is set to True in the Flask application's configuration. If it is, the
session cookie will be transmitted over a secure protocol (HTTPS).

Args:
    app: The Flask application instance.

Returns:
    bool: Whether the session cookie is secure.
""""""",src/flask/sessions.py,223f05ba6a9f2fdf4bdbbb8072a3526458363344
0.5696326,def open_session,"""""""This is called at the beginning of each request, after
        pushing the request context, before matching the URL.

        This must return an object which implements a dictionary-like
        interface as well as the :class:`SessionMixin` interface.

        This will return ``None`` to indicate that loading failed in
        some way that is not immediately an error. The request
        context will fall back to using :meth:`make_null_session`
        in this case.
        """"""","""""""
Opens a new session for the given Flask application and request.

Args:
    - `app`: The Flask application instance.
    - `request`: The HTTP request object.

Returns:
    An optional SessionMixin object, indicating whether a session was successfully opened. If not implemented by subclasses, raises NotImplementedError.

Raises:
    NotImplementedError: If the method is not implemented by subclasses.
""""""",src/flask/sessions.py,223f05ba6a9f2fdf4bdbbb8072a3526458363344
0.5272236,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session cookie to the client's browser.

This method sets a session cookie based on the provided `app`, `session`, and `response` objects.
It determines the necessary cookie attributes (name, domain, path, secure, samesite, httponly) using
the `get_cookie_name`, `get_cookie_domain`, `get_cookie_path`, `get_cookie_secure`, 
`get_cookie_samesite`, and `get_cookie_httponly` methods.

Parameters:
    app (Flask): The Flask application instance.
    session (SessionMixin): The session object being saved.
    response (Response): The HTTP response object.

Returns:
    None
""""""",src/flask/sessions.py,223f05ba6a9f2fdf4bdbbb8072a3526458363344
0.51676315,def session_transaction,"""""""When used in combination with a ``with`` statement this opens a
        session transaction.  This can be used to modify the session that
        the test client uses.  Once the ``with`` block is left the session is
        stored back.

        ::

            with client.session_transaction() as session:
                session['value'] = 42

        Internally this is implemented by going through a temporary test
        request context and since session handling could depend on
        request variables this function accepts the same arguments as
        :meth:`~flask.Flask.test_request_context` which are directly
        passed through.
        """"""","""""""
Yield a session object for the current test request context.

This function is used to create and manage sessions for testing purposes.
It checks if cookies are enabled, sets up the WSGI context, opens a new session,
and saves it after use. If the session backend fails to open a session, a
RuntimeError is raised.

Args:
    *args: Variable length argument list containing any arguments passed to the test request context.
    **kwargs: Keyworded arguments for the test request context.

Returns:
    A generator yielding SessionMixin objects.
""""""",src/flask/testing.py,223f05ba6a9f2fdf4bdbbb8072a3526458363344
0.61847794,def make_null_session,"""""""Creates a null session which acts as a replacement object if the
        real session support could not be loaded due to a configuration
        error.  This mainly aids the user experience because the job of the
        null session is to still support lookup without complaining but
        modifications are answered with a helpful error message of what
        failed.

        This creates an instance of :attr:`null_session_class` by default.
        """"""","""""""
Creates and returns a null session instance for the given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    NullSession: A null session instance.

Raises:
    TypeError: If the provided `app` is not an instance of Flask.

Note:
This method creates a new instance of the `NullSession` class, which does not store any data. It is intended for use in testing or other scenarios where no session data needs to be stored.
""""""",src/flask/sessions.py,744c1fadf12fd096ea42055bbb90c396a71e0fd7
0.64614385,def get_cookie_domain,"""""""Returns the domain that should be set for the session cookie.

        Uses ``SESSION_COOKIE_DOMAIN`` if it is configured, otherwise
        falls back to detecting the domain based on ``SERVER_NAME``.

        Once detected (or if not set at all), ``SESSION_COOKIE_DOMAIN`` is
        updated to avoid re-running the logic.
        """"""","""""""
Returns the domain of the session cookie from a given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    str | None: The domain of the session cookie, or None if not set.
""""""",src/flask/sessions.py,744c1fadf12fd096ea42055bbb90c396a71e0fd7
0.7656,def get_cookie_secure,"""""""Returns True if the cookie should be secure.  This currently
        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.
        """"""","""""""
Returns whether the session cookie is secure.

This method checks if the `SESSION_COOKIE_SECURE` configuration variable
is set to True in the Flask application's configuration. If it is, the
session cookie will be transmitted over a secure protocol (HTTPS).

Args:
    app: The Flask application instance.

Returns:
    bool: Whether the session cookie is secure.
""""""",src/flask/sessions.py,744c1fadf12fd096ea42055bbb90c396a71e0fd7
0.5735377,def get_cookie_samesite,"""""""Return ``'Strict'`` or ``'Lax'`` if the cookie should use the
        ``SameSite`` attribute. This currently just returns the value of
        the :data:`SESSION_COOKIE_SAMESITE` setting.
        """"""","""""""
Returns the value of the `SESSION_COOKIE_SAMESITE` configuration option from the provided Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    str: The value of the `SESSION_COOKIE_SAMESITE` configuration option.
""""""",src/flask/sessions.py,744c1fadf12fd096ea42055bbb90c396a71e0fd7
0.5272236,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session cookie to the client's browser.

This method sets a session cookie based on the provided `app`, `session`, and `response` objects.
It determines the necessary cookie attributes (name, domain, path, secure, samesite, httponly) using
the `get_cookie_name`, `get_cookie_domain`, `get_cookie_path`, `get_cookie_secure`, 
`get_cookie_samesite`, and `get_cookie_httponly` methods.

Parameters:
    app (Flask): The Flask application instance.
    session (SessionMixin): The session object being saved.
    response (Response): The HTTP response object.

Returns:
    None
""""""",src/flask/sessions.py,744c1fadf12fd096ea42055bbb90c396a71e0fd7
0.61847806,def make_null_session,"""""""Creates a null session which acts as a replacement object if the
        real session support could not be loaded due to a configuration
        error.  This mainly aids the user experience because the job of the
        null session is to still support lookup without complaining but
        modifications are answered with a helpful error message of what
        failed.

        This creates an instance of :attr:`null_session_class` by default.
        """"""","""""""
Creates and returns a null session instance for the given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    NullSession: A null session instance.

Raises:
    TypeError: If the provided `app` is not an instance of Flask.

Note:
This method creates a new instance of the `NullSession` class, which does not store any data. It is intended for use in testing or other scenarios where no session data needs to be stored.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.6895287,def get_cookie_name,"""""""The name of the session cookie. Uses``app.config[""SESSION_COOKIE_NAME""]``.""""""","""""""
Returns the name of the cookie used to store session data in a Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    str: The name of the session cookie.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.59373665,def get_cookie_domain,"""""""The value of the ``Domain`` parameter on the session cookie. If not set,
        browsers will only send the cookie to the exact domain it was set from.
        Otherwise, they will send it to any subdomain of the given value as well.

        Uses the :data:`SESSION_COOKIE_DOMAIN` config.

        .. versionchanged:: 2.3
            Not set by default, does not fall back to ``SERVER_NAME``.
        """"""","""""""
Returns the domain of the session cookie from a given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    str | None: The domain of the session cookie, or None if not set.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.68853897,def get_cookie_path,"""""""Returns the path for which the cookie should be valid.  The
        default implementation uses the value from the ``SESSION_COOKIE_PATH``
        config var if it's set, and falls back to ``APPLICATION_ROOT`` or
        uses ``/`` if it's ``None``.
        """"""","""""""
Returns the path of the cookie used by a Flask application.

If 'SESSION_COOKIE_PATH' is set in the application's configuration,
its value will be returned. Otherwise, the value of
'APPLICATION_ROOT' will be used as a fallback.

Args:
    app (Flask): The Flask application instance.

Returns:
    str: The path of the cookie.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.7083045,def get_cookie_httponly,"""""""Returns True if the session cookie should be httponly.  This
        currently just returns the value of the ``SESSION_COOKIE_HTTPONLY``
        config var.
        """"""","""""""
Returns whether the session cookie is set to be HTTP-only in the given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    bool: True if the session cookie is HTTP-only, False otherwise.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.7656,def get_cookie_secure,"""""""Returns True if the cookie should be secure.  This currently
        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.
        """"""","""""""
Returns whether the session cookie is secure.

This method checks if the `SESSION_COOKIE_SECURE` configuration variable
is set to True in the Flask application's configuration. If it is, the
session cookie will be transmitted over a secure protocol (HTTPS).

Args:
    app: The Flask application instance.

Returns:
    bool: Whether the session cookie is secure.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.5735377,def get_cookie_samesite,"""""""Return ``'Strict'`` or ``'Lax'`` if the cookie should use the
        ``SameSite`` attribute. This currently just returns the value of
        the :data:`SESSION_COOKIE_SAMESITE` setting.
        """"""","""""""
Returns the value of the `SESSION_COOKIE_SAMESITE` configuration option from the provided Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    str: The value of the `SESSION_COOKIE_SAMESITE` configuration option.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.6405388,def get_expiration_time,"""""""A helper method that returns an expiration date for the session
        or ``None`` if the session is linked to the browser session.  The
        default implementation returns now + the permanent session
        lifetime configured on the application.
        """"""","""""""
Returns the expiration time of a Flask session.

If the session is permanent, returns the current UTC time plus the permanent session lifetime.
Otherwise, returns None.

Args:
    self: The instance of the class that this method belongs to (not used in this implementation).
    app: A Flask application object.
    session: A SessionMixin object representing the session.

Returns:
    datetime: The expiration time of the session, or None if the session is not permanent.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.56963253,def open_session,"""""""This is called at the beginning of each request, after
        pushing the request context, before matching the URL.

        This must return an object which implements a dictionary-like
        interface as well as the :class:`SessionMixin` interface.

        This will return ``None`` to indicate that loading failed in
        some way that is not immediately an error. The request
        context will fall back to using :meth:`make_null_session`
        in this case.
        """"""","""""""
Opens a new session for the given Flask application and request.

Args:
    - `app`: The Flask application instance.
    - `request`: The HTTP request object.

Returns:
    An optional SessionMixin object, indicating whether a session was successfully opened. If not implemented by subclasses, raises NotImplementedError.

Raises:
    NotImplementedError: If the method is not implemented by subclasses.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.47505915,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session.

This method is intended to be overridden by subclasses. It takes in the Flask application,
the session object, and the response object as parameters. The implementation of this
method should be provided by the subclass.

Parameters:
app (Flask): The Flask application instance.
session (SessionMixin): The session object.
response (Response): The response object.

Returns:
None

Raises:
NotImplementedError: This method is intended to be overridden and should not be called directly.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.49295735,def open_session,"""""""This is called at the beginning of each request, after
        pushing the request context, before matching the URL.

        This must return an object which implements a dictionary-like
        interface as well as the :class:`SessionMixin` interface.

        This will return ``None`` to indicate that loading failed in
        some way that is not immediately an error. The request
        context will fall back to using :meth:`make_null_session`
        in this case.
        """"""","""""""
Opens a new session for the given Flask application and request.

Args:
    app (Flask): The Flask application instance.
    request (Request): The HTTP request object.

Returns:
    t.Optional[SecureCookieSession]: The opened session, or None if creation fails.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.5272236,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session cookie to the client's browser.

This method sets a session cookie based on the provided `app`, `session`, and `response` objects.
It determines the necessary cookie attributes (name, domain, path, secure, samesite, httponly) using
the `get_cookie_name`, `get_cookie_domain`, `get_cookie_path`, `get_cookie_secure`, 
`get_cookie_samesite`, and `get_cookie_httponly` methods.

Parameters:
    app (Flask): The Flask application instance.
    session (SessionMixin): The session object being saved.
    response (Response): The HTTP response object.

Returns:
    None
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.52747554,def session_transaction,"""""""When used in combination with a ``with`` statement this opens a
        session transaction.  This can be used to modify the session that
        the test client uses.  Once the ``with`` block is left the session is
        stored back.

        ::

            with client.session_transaction() as session:
                session['value'] = 42

        Internally this is implemented by going through a temporary test
        request context and since session handling could depend on
        request variables this function accepts the same arguments as
        :meth:`~flask.Flask.test_request_context` which are directly
        passed through.
        """"""","""""""
Yield a session object for the current test request context.
        # new cookie interface for Werkzeug >= 2.3
        cookie_storage = self._cookies if hasattr(self, ""_cookies"") else self.cookie_jar

This function is used to create and manage sessions for testing purposes.
It checks if cookies are enabled, sets up the WSGI context, opens a new session,
and saves it after use. If the session backend fails to open a session, a
RuntimeError is raised.

Args:
    *args: Variable length argument list containing any arguments passed to the test request context.
    **kwargs: Keyworded arguments for the test request context.

Returns:
    A generator yielding SessionMixin objects.
""""""",src/flask/testing.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.65451866,def modules_tmp_path,"""""""A temporary directory added to sys.path.""""""","""""""
Returns a temporary path for modules.

This function creates a new directory at the specified `tmp_path` and prepends it to the system path using `sys.path_prepend`. The returned path is then used as the base for module imports.

Args:
    tmp_path (Path): The base path where the temporary directory will be created.
    monkeypatch (object): An object with a method to prepend the system path.

Returns:
    Path: The temporary path for modules.
""""""",tests/conftest.py,603a942068d1315ad16c03d6121fec61d243cb2c
0.6007905,def get_root_path,"""""""Find the root path of a package, or the path that contains a
    module. If it cannot be found, returns the current working
    directory.

    Not to be confused with the value returned by :func:`find_package`.

    :meta private:
    """"""","""""""
Returns the root path of the given module.

The function first checks if the module has already been imported and
has a file attribute. If so, it returns the directory of that file.
If not, it attempts to find the spec of the import using `importlib.util.find_spec`.
If the spec is found, it uses the loader's get_filename method to get the filepath.
If the filepath is None, it raises a RuntimeError.

Args:
    import_name (str): The name of the module to find the root path for.

Returns:
    str: The root path of the given module.

Raises:
    ValueError: If the spec is not found.
    RuntimeError: If no file path can be found for the module.
""""""",src/flask/helpers.py,9d47e4b50e0be86d524e23593bb41c0bf91ccce6
