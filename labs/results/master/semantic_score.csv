Semantic-Score,Code,Original-Comment,Agent-Comment,Filename,Agent-Commit
0.65321296,def get_debug_flag,"""""""Get whether debug mode should be enabled for the app, indicated by the
    :envvar:`FLASK_DEBUG` environment variable. The default is ``False``.
    """"""","""""""
Returns a boolean indicating whether debug mode is enabled.

The value of the `FLASK_DEBUG` environment variable is checked. If it exists, its value is converted to lowercase and compared with '0', 'false', or 'no'. If the value matches any of these strings, debug mode is disabled; otherwise, it's enabled.

Args:
    None

Returns:
    bool: Whether debug mode is enabled.
""""""",src/flask/helpers.py,aa4ecf05d33c37d9cc04794f4332b34c94fd6d9e
0.59315944,def dump,"""""""Serialize data as JSON and write to a file.

    If :data:`~flask.current_app` is available, it will use its
    :meth:`app.json.dump() <flask.json.provider.JSONProvider.dump>`
    method, otherwise it will use :func:`json.dump`.

    :param obj: The data to serialize.
    :param fp: A file opened for writing text. Should use the UTF-8
        encoding to be valid JSON.
    :param kwargs: Arguments passed to the ``dump`` implementation.

    .. versionchanged:: 2.3
        The ``app`` parameter was removed.

    .. versionchanged:: 2.2
        Calls ``current_app.json.dump``, allowing an app to override
        the behavior.

    .. versionchanged:: 2.0
        Writing to a binary file, and the ``encoding`` argument, will be
        removed in Flask 2.1.
    """"""","""""""
Dumps the provided object to a file stream.

This function is used to serialize and dump objects to a file. It supports both Flask's `current_app.json` and the standard `_json` library for dumping objects.

Args:
    obj (t.Any): The object to be dumped.
    fp (t.IO[str]): The file stream where the object will be written.
    **kwargs (t.Any): Additional keyword arguments to be passed to the dump function. If `current_app` is not set, these arguments are used to configure the dumping process.

Returns:
    None
""""""",src/flask/json/__init__.py,aa4ecf05d33c37d9cc04794f4332b34c94fd6d9e
0.60022473,def loads,"""""""Deserialize data as JSON.

    If :data:`~flask.current_app` is available, it will use its
    :meth:`app.json.loads() <flask.json.provider.JSONProvider.loads>`
    method, otherwise it will use :func:`json.loads`.

    :param s: Text or UTF-8 bytes.
    :param kwargs: Arguments passed to the ``loads`` implementation.

    .. versionchanged:: 2.3
        The ``app`` parameter was removed.

    .. versionchanged:: 2.2
        Calls ``current_app.json.loads``, allowing an app to override
        the behavior.

    .. versionchanged:: 2.0
        ``encoding`` will be removed in Flask 2.1. The data must be a
        string or UTF-8 bytes.

    .. versionchanged:: 1.0.3
        ``app`` can be passed directly, rather than requiring an app
        context for configuration.
    """"""","""""""
Loads JSON data from a string or bytes object.

This function is used to parse JSON data from various sources. It can handle both strings and bytes objects as input.
The `current_app` variable is used to determine the context in which this function is being called. If it exists, 
it will use its `json.loads` method to parse the data. Otherwise, it will fall back to a generic `_json.loads` method.

Args:
    s (str | bytes): The JSON data to be loaded.
    **kwargs: Additional keyword arguments to be passed to the parsing function.

Returns:
    t.Any: The parsed JSON data.

Raises:
    None
""""""",src/flask/json/__init__.py,aa4ecf05d33c37d9cc04794f4332b34c94fd6d9e
0.69180655,def load,"""""""Deserialize data as JSON read from a file.

    If :data:`~flask.current_app` is available, it will use its
    :meth:`app.json.load() <flask.json.provider.JSONProvider.load>`
    method, otherwise it will use :func:`json.load`.

    :param fp: A file opened for reading text or UTF-8 bytes.
    :param kwargs: Arguments passed to the ``load`` implementation.

    .. versionchanged:: 2.3
        The ``app`` parameter was removed.

    .. versionchanged:: 2.2
        Calls ``current_app.json.load``, allowing an app to override
        the behavior.

    .. versionchanged:: 2.2
        The ``app`` parameter will be removed in Flask 2.3.

    .. versionchanged:: 2.0
        ``encoding`` will be removed in Flask 2.1. The file must be text
        mode, or binary mode with UTF-8 bytes.
    """"""","""""""
Loads JSON data from a file.

This function takes an open file object `fp` and optional keyword arguments `**kwargs`.
If the `current_app` context is available, it will use its `json.load()` method to load the data.
Otherwise, it falls back to using `_json.load()`.

Args:
    fp (IO[AnyStr]): The file object containing the JSON data.
    **kwargs: Optional keyword arguments to pass to the loading function.

Returns:
    Any: The loaded JSON data.
""""""",src/flask/json/__init__.py,aa4ecf05d33c37d9cc04794f4332b34c94fd6d9e
0.6269858,def response,"""""""Serialize the given arguments as JSON, and return a
        :class:`~flask.Response` object with the ``application/json``
        mimetype.

        The :func:`~flask.json.jsonify` function calls this method for
        the current application.

        Either positional or keyword arguments can be given, not both.
        If no arguments are given, ``None`` is serialized.

        :param args: A single value to serialize, or multiple values to
            treat as a list to serialize.
        :param kwargs: Treat as a dict to serialize.
        """"""","""""""
Returns a response object with the prepared data.

This method prepares an HTTP response based on the provided arguments and 
configuration. It uses the `_prepare_response_obj` method to prepare the 
response object and then formats it according to the specified dump_args.

Args:
    *args: Variable length argument list containing any type of data.
    **kwargs: Keyworded arguments containing any type of data.

Returns:
    Response: An HTTP response object with the prepared data.
""""""",src/flask/json/provider.py,aa4ecf05d33c37d9cc04794f4332b34c94fd6d9e
0.60177743,def response,"""""""Serialize the given arguments as JSON, and return a
        :class:`~flask.Response` object with it. The response mimetype
        will be ""application/json"" and can be changed with
        :attr:`mimetype`.

        If :attr:`compact` is ``False`` or debug mode is enabled, the
        output will be formatted to be easier to read.

        Either positional or keyword arguments can be given, not both.
        If no arguments are given, ``None`` is serialized.

        :param args: A single value to serialize, or multiple values to
            treat as a list to serialize.
        :param kwargs: Treat as a dict to serialize.
        """"""","""""""
Returns a response object with the prepared data.

This method prepares an HTTP response based on the provided arguments and 
configuration. It uses the `_prepare_response_obj` method to prepare the 
response object and then formats it according to the specified dump_args.

Args:
    *args: Variable length argument list containing any type of data.
    **kwargs: Keyworded arguments containing any type of data.

Returns:
    Response: An HTTP response object with the prepared data.
""""""",src/flask/json/provider.py,aa4ecf05d33c37d9cc04794f4332b34c94fd6d9e
0.60619146,def got_first_request,"""""""This attribute is set to ``True`` if the application started
        handling the first request.

        .. deprecated:: 2.3
            Will be removed in Flask 2.4.

        .. versionadded:: 0.8
        """"""","""""""
Deprecation Notice: `got_first_request` is deprecated and will be removed in Flask 2.4.

Returns:
    bool: Whether the first request has been received.

Raises:
    DeprecationWarning: If the function is called, indicating that it should not be used.
""""""",src/flask/app.py,1fdd9ae1bbdbc3a1c784cc0eddc876e68df871a3
0.5608919,def from_file,"""""""Update the values in the config from a file that is loaded
        using the ``load`` parameter. The loaded data is passed to the
        :meth:`from_mapping` method.

        .. code-block:: python

            import json
            app.config.from_file(""config.json"", load=json.load)

            import tomllib
            app.config.from_file(""config.toml"", load=tomllib.load, text=False)

        :param filename: The path to the data file. This can be an
            absolute path or relative to the config root path.
        :param load: A callable that takes a file handle and returns a
            mapping of loaded data from the file.
        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``
            implements a ``read`` method.
        :param silent: Ignore the file if it doesn't exist.
        :param text: Open the file in text or binary mode.
        :return: ``True`` if the file was loaded successfully.

        .. versionchanged:: 2.3
            The ``text`` parameter was added.

        .. versionadded:: 2.0
        """"""","""""""
Loads a configuration file from disk.

This method attempts to open the specified file and load its contents using the provided `load` function.
If successful, it returns whether the loaded object is a mapping (i.e., a dictionary or similar data structure).
If an error occurs while loading the file, it will be raised unless `silent` is True, in which case it will return False instead.

Parameters:
filename (str): The path to the configuration file to load.
load (Callable[[IO[Any], Mapping]): A function that takes an IO object and returns a mapping.
silent (bool, optional): Whether to suppress error messages. Defaults to False.
text (bool, optional): Whether to open the file in text mode instead of binary mode. Defaults to True.

Returns:
bool: Whether the loaded object is a mapping or not.
""""""",src/flask/config.py,4b417579955d9956186d41edf2ee8ebe823ae399
0.73752147,def session_cookie_name,"""""""The name of the cookie set by the session interface.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use ``app.config[""SESSION_COOKIE_NAME""]``
            instead.
        """"""","""""""
Returns the name of the session cookie.

This method is deprecated and will be removed in Flask 2.3. Instead, use
`app.config['SESSION_COOKIE_NAME']`.

Args:
    None

Returns:
    str: The name of the session cookie.
""""""",src/flask/app.py,e27319e633c170ca8c59ba76332614b67db41f23
0.6672024,def session_cookie_name,"""""""The name of the cookie set by the session interface.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use ``app.config[""SESSION_COOKIE_NAME""]``
            instead.
        """"""","""""""
Deprecation Notice:

The `session_cookie_name` method is deprecated and will be removed in Flask 2.3.
Use the 'SESSION_COOKIE_NAME' configuration option in 'app.config' instead.

Parameters:
value (str): The new session cookie name.

Returns:
None
""""""",src/flask/app.py,e27319e633c170ca8c59ba76332614b67db41f23
0.5199793,def send_file_max_age_default,"""""""The default value for ``max_age`` for :func:`~flask.send_file`. The default
        is ``None``, which tells the browser to use conditional requests instead of a
        timed cache.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use
            ``app.config[""SEND_FILE_MAX_AGE_DEFAULT""]`` instead.

        .. versionchanged:: 2.0
            Defaults to ``None`` instead of 12 hours.
        """"""","""""""
Deprecation Notice:

The `send_file_max_age_default` method is deprecated and will be removed in Flask 2.3.
Use 'SEND_FILE_MAX_AGE_DEFAULT' in 'app.config' instead.

Returns:
    Optional[timedelta]: The maximum age for sending files, or None if not set.

Raises:
    DeprecationWarning: If the deprecated method is called.

Note:
This function is only available for backwards compatibility and should not be used in new code.
""""""",src/flask/app.py,e27319e633c170ca8c59ba76332614b67db41f23
0.5927904,def send_file_max_age_default,"""""""The default value for ``max_age`` for :func:`~flask.send_file`. The default
        is ``None``, which tells the browser to use conditional requests instead of a
        timed cache.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use
            ``app.config[""SEND_FILE_MAX_AGE_DEFAULT""]`` instead.

        .. versionchanged:: 2.0
            Defaults to ``None`` instead of 12 hours.
        """"""","""""""
Deprecation Notice:

The `send_file_max_age_default` method is deprecated and will be removed in Flask 2.3.
Use 'SEND_FILE_MAX_AGE_DEFAULT' in 'app.config' instead.

Parameters:
    value (Union[int, timedelta, None]): The maximum age of sent files in seconds.
        If int, the value is used directly as a number of seconds.
        If timedelta, the value is converted to seconds.
        If None, no default is set.

Returns:
    None
""""""",src/flask/app.py,e27319e633c170ca8c59ba76332614b67db41f23
0.5998347,def use_x_sendfile,"""""""Enable this to use the ``X-Sendfile`` feature, assuming the server supports
        it, from :func:`~flask.send_file`.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use ``app.config[""USE_X_SENDFILE""]`` instead.
        """"""","""""""
Deprecation Notice:

The `use_x_sendfile` method is deprecated and will be removed in Flask 2.3.
Instead, use the 'USE_X_SENDFILE' configuration option in the application's
configuration dictionary.

Returns:
    bool: The value of the 'USE_X_SENDFILE' configuration option.

Raises:
    DeprecationWarning: If the 'use_x_sendfile' method is called.
""""""",src/flask/app.py,e27319e633c170ca8c59ba76332614b67db41f23
0.53567064,def json_encoder,"""""""The JSON encoder class to use. Defaults to
        :class:`~flask.json.JSONEncoder`.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Returns the JSON encoder class for this application.

This method is deprecated in favor of customizing 'app.json_provider_class' or 'app.json'.
The `DeprecationWarning` will be raised when calling this function.
 
Args:
    None
 
Returns:
    t.Type[json.JSONEncoder]: The JSON encoder class.
""""""",src/flask/app.py,e27319e633c170ca8c59ba76332614b67db41f23
0.6460945,def json_encoder,"""""""The JSON encoder class to use. Defaults to
        :class:`~flask.json.JSONEncoder`.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Deprecation Warning: `json_encoder` is deprecated and will be removed in Flask 2.3.
Customize `json_provider_class` or `json` instead.

Args:
    value (t.Type[json.JSONEncoder]): The new JSON encoder class to use.

Returns:
    None
""""""",src/flask/app.py,e27319e633c170ca8c59ba76332614b67db41f23
0.59121025,def json_decoder,"""""""The JSON decoder class to use. Defaults to
        :class:`~flask.json.JSONDecoder`.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Returns the JSON decoder class.

This function returns the JSON decoder class used by the application. It is deprecated in favor of customizing 'app.json_provider_class' or 'app.json'. 

Parameters:
    None

Returns:
    t.Type[json.JSONDecoder]: The JSON decoder class.

Raises:
    DeprecationWarning: If 'app.json_decoder' is called, it will raise a deprecation warning.
""""""",src/flask/app.py,e27319e633c170ca8c59ba76332614b67db41f23
0.5319964,def json_decoder,"""""""The JSON decoder class to use. Defaults to
        :class:`~flask.json.JSONDecoder`.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Decodes JSON data using the provided decoder.

This function is deprecated in Flask 2.3 and will be removed.
Instead, customize `app.json_provider_class` or `app.json`.

Args:
    value (t.Type[json.JSONDecoder]): The JSON decoder to use.

Returns:
    None
""""""",src/flask/app.py,e27319e633c170ca8c59ba76332614b67db41f23
0.5253534,def propagate_exceptions,"""""""Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration
        value in case it's set, otherwise a sensible default is returned.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3.

        .. versionadded:: 0.7
        """"""","""""""
Propagates exceptions to the application's context.

This function checks the value of `PROPAGATE_EXCEPTIONS` in the Flask configuration.
If it exists, its value is returned. Otherwise, the function returns whether the application is running in testing or debug mode.

Deprecation Warning: This method is deprecated and will be removed in Flask 2.3. It's recommended to use a different approach for exception propagation.

Args:
    None

Returns:
    bool: Whether exceptions should be propagated to the application's context.
""""""",src/flask/app.py,e27319e633c170ca8c59ba76332614b67db41f23
0.51215386,def templates_auto_reload,"""""""Reload templates when they are changed. Used by
        :meth:`create_jinja_environment`. It is enabled by default in debug mode.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use ``app.config[""TEMPLATES_AUTO_RELOAD""]``
            instead.

        .. versionadded:: 1.0
            This property was added but the underlying config and behavior
            already existed.
        """"""","""""""
Returns the value of `TEMPLATES_AUTO_RELOAD` from the application configuration.

If `TEMPLATES_AUTO_RELOAD` is set, its value is returned. Otherwise, the value of `debug` is used as a fallback.

Deprecated since Flask 2.3 in favor of using `TEMPLATES_AUTO_RELOAD` in `app.config`.

Args:
    None

Returns:
    bool: The value of `TEMPLATES_AUTO_RELOAD` or `debug` if not set.
""""""",src/flask/app.py,e27319e633c170ca8c59ba76332614b67db41f23
0.53665113,def env,"""""""What environment the app is running in. This maps to the :data:`ENV` config
        key.

        **Do not enable development when deploying in production.**

        Default: ``'production'``

        .. deprecated:: 2.2
            Will be removed in Flask 2.3.
        """"""","""""""
Returns the environment variable as a string.

Deprecation Warning: This method is deprecated and will be removed in Flask 2.3.
Use `app.debug` instead.

Args:
    None

Returns:
    str: The environment variable value.

Raises:
    DeprecationWarning: If the 'app.env' method is called.
""""""",src/flask/app.py,e27319e633c170ca8c59ba76332614b67db41f23
0.42823496,def env,"""""""What environment the app is running in. This maps to the :data:`ENV` config
        key.

        **Do not enable development when deploying in production.**

        Default: ``'production'``

        .. deprecated:: 2.2
            Will be removed in Flask 2.3.
        """"""","""""""
Deprecation Warning: `env` method is deprecated and will be removed in Flask 2.3.
Use `debug` attribute instead.

Args:
    value (str): The environment variable to set.

Returns:
    None
""""""",src/flask/app.py,e27319e633c170ca8c59ba76332614b67db41f23
0.6046043,def before_first_request,"""""""Registers a function to be run before the first request to this
        instance of the application.

        The function will be called without any arguments and its return
        value is ignored.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Run setup code when creating
            the application instead.

        .. versionadded:: 0.8
        """"""","""""""
Deprecation Warning: before_first_request function is deprecated and will be removed in Flask 2.3.
 
   To avoid deprecation warnings, run setup code while creating the application instead.

   Parameters:
       f (T_before_first_request): The function to be executed before the first request.

   Returns:
       T_before_first_request: The input function for appending to self.before_first_request_funcs.

   Note:
       This function is deprecated and should not be used in new applications. Instead, run setup code while creating the application.
""""""",src/flask/app.py,e27319e633c170ca8c59ba76332614b67db41f23
0.52269036,def full_dispatch_request,"""""""Dispatches the request and on top of that performs request
        pre and postprocessing as well as HTTP exception catching and
        error handling.

        .. versionadded:: 0.7
        """"""","""""""
Dispatches the full request, including running before_first_request functions and handling exceptions.

This method is deprecated in favor of a more efficient implementation. It should not be used in new code.

Parameters
----------
self : object
    The instance of the class that this method belongs to.

Returns
-------
Response
    The response from the dispatching process.
""""""",src/flask/app.py,e27319e633c170ca8c59ba76332614b67db41f23
0.62594527,def json_encoder,"""""""Blueprint-local JSON encoder class to use. Set to ``None`` to use the app's.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Returns the JSON encoder class, deprecation warning if applicable.

This function is deprecated and will be removed in Flask 2.3. It's recommended to customize 'app.json_provider_class' or 'app.json' instead.

Args:
    None

Returns:
    t.Union[t.Type[json.JSONEncoder], None]: The JSON encoder class or None.
""""""",src/flask/blueprints.py,e27319e633c170ca8c59ba76332614b67db41f23
0.66514444,def json_encoder,"""""""Blueprint-local JSON encoder class to use. Set to ``None`` to use the app's.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Deprecation Warning: json_encoder function is deprecated and will be removed in Flask 2.3.
 
To customize the JSON encoding behavior, use either 'app.json_provider_class' or 'app.json' instead.

Args:
    value (Union[Type[JSONEncoder], None]): The JSON encoder class to use. Defaults to None.

Returns:
    None
""""""",src/flask/blueprints.py,e27319e633c170ca8c59ba76332614b67db41f23
0.62516713,def json_decoder,"""""""Blueprint-local JSON decoder class to use. Set to ``None`` to use the app's.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Decodes JSON values.

This function is deprecated and will be removed in Flask 2.3.
Instead, customize `app.json_provider_class` or `app.json`.

Args:
    value (t.Union[t.Type[json.JSONDecoder], None]): The JSON decoder to use.

Returns:
    None
""""""",src/flask/blueprints.py,e27319e633c170ca8c59ba76332614b67db41f23
0.6416527,def before_app_first_request,"""""""Register a function to run before the first request to the application is
        handled by the worker. Equivalent to :meth:`.Flask.before_first_request`.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Run setup code when creating
            the application instead.
        """"""","""""""
Deprecation Notice:

The `before_app_first_request` function is deprecated and will be removed in Flask 2.3.
Use the `record_once` method instead to run setup code when registering a blueprint.

Parameters:
f (T_before_first_request): The function to register for before first request.

Returns:
T_before_first_request: The registered function.

Raises:
DeprecationWarning: If the function is deprecated and should be replaced with `record_once`.
""""""",src/flask/blueprints.py,e27319e633c170ca8c59ba76332614b67db41f23
0.57756054,def logger,"""""""A standard Python :class:`~logging.Logger` for the app, with
        the same name as :attr:`name`.

        In debug mode, the logger's :attr:`~logging.Logger.level` will
        be set to :data:`~logging.DEBUG`.

        If there are no handlers configured, a default handler will be
        added. See :doc:`/logging` for more information.

        .. versionchanged:: 1.1.0
            The logger takes the same name as :attr:`name` rather than
            hard-coding ``""flask.app""``.

        .. versionchanged:: 1.0.0
            Behavior was simplified. The logger is always named
            ``""flask.app""``. The level is only set during configuration,
            it doesn't check ``app.debug`` each time. Only one format is
            used, not different ones depending on ``app.debug``. No
            handlers are removed, and a handler is only added if no
            handlers are already configured.

        .. versionadded:: 0.3
        """"""","""""""
Returns an instance of the Logger class.

This method is used to initialize and return a new logger object. The logger object is created using the `create_logger` function, which takes the current object (`self`) as an argument.

Args:
    self: The current object.

Returns:
    logging.Logger: An instance of the Logger class.
""""""",src/flask/app.py,3e3474f1d7627f89100578dd9d0e892d41becc64
0.43489042,def jinja_env,"""""""The Jinja environment used to load templates.

        The environment is created the first time this property is
        accessed. Changing :attr:`jinja_options` after that will have no
        effect.
        """"""","""""""
Returns an instance of Jinja2's Environment class.

This method is a wrapper around `create_jinja_environment` and provides a more Pythonic interface for creating a new Jinja environment. The returned environment can be used to compile templates, render templates with data, and perform other template-related tasks.

Note: This method does not create a new environment instance; it simply delegates the creation to the underlying `create_jinja_environment` method.
""""""",src/flask/app.py,3e3474f1d7627f89100578dd9d0e892d41becc64
0.5211363,def full_dispatch_request,"""""""Dispatches the request and on top of that performs request
        pre and postprocessing as well as HTTP exception catching and
        error handling.

        .. versionadded:: 0.7
        """"""","""""""
Dispatches the full request, including running before_first_request functions and handling exceptions.

This method is deprecated in favor of a more efficient implementation. It should not be used in new code.

Parameters
self : object
    The instance of the class that this method belongs to.

Returns
Response
    The response from the dispatching process.
""""""",src/flask/app.py,3e3474f1d7627f89100578dd9d0e892d41becc64
0.61241263,def full_dispatch_request,"""""""Dispatches the request and on top of that performs request
        pre and postprocessing as well as HTTP exception catching and
        error handling.

        .. versionadded:: 0.7
        """"""","""""""
Dispatches the full request, including running before_first_request functions and handling exceptions.
        # Run before_first_request functions if this is the thread's first request.
        # Inlined to avoid a method call on subsequent requests.
        # This is deprecated, will be removed in Flask 2.3.
        if not self._got_first_request:
            with self._before_request_lock:
                if not self._got_first_request:
                    for func in self.before_first_request_funcs:
                        self.ensure_sync(func)()

This method is deprecated in favor of a more efficient implementation. It should not be used in new code.

Parameters
self : object
    The instance of the class that this method belongs to.

Returns
Response
    The response from the dispatching process.
""""""",src/flask/app.py,9ba7939bccf68425d862de47ec459b78bb00a0dd
0.57756054,def logger,"""""""A standard Python :class:`~logging.Logger` for the app, with
        the same name as :attr:`name`.

        In debug mode, the logger's :attr:`~logging.Logger.level` will
        be set to :data:`~logging.DEBUG`.

        If there are no handlers configured, a default handler will be
        added. See :doc:`/logging` for more information.

        .. versionchanged:: 1.1.0
            The logger takes the same name as :attr:`name` rather than
            hard-coding ``""flask.app""``.

        .. versionchanged:: 1.0.0
            Behavior was simplified. The logger is always named
            ``""flask.app""``. The level is only set during configuration,
            it doesn't check ``app.debug`` each time. Only one format is
            used, not different ones depending on ``app.debug``. No
            handlers are removed, and a handler is only added if no
            handlers are already configured.

        .. versionadded:: 0.3
        """"""","""""""
Returns an instance of the Logger class.

This method is used to initialize and return a new logger object. The logger object is created using the `create_logger` function, which takes the current object (`self`) as an argument.

Args:
    self: The current object.

Returns:
    logging.Logger: An instance of the Logger class.
""""""",src/flask/app.py,48a192c58e52841cfe30f55f3f797e4aa49a7444
0.43489042,def jinja_env,"""""""The Jinja environment used to load templates.

        The environment is created the first time this property is
        accessed. Changing :attr:`jinja_options` after that will have no
        effect.
        """"""","""""""
Returns an instance of Jinja2's Environment class.

This method is a wrapper around `create_jinja_environment` and provides a more Pythonic interface for creating a new Jinja environment. The returned environment can be used to compile templates, render templates with data, and perform other template-related tasks.

Note: This method does not create a new environment instance; it simply delegates the creation to the underlying `create_jinja_environment` method.
""""""",src/flask/app.py,48a192c58e52841cfe30f55f3f797e4aa49a7444
0.73752147,def session_cookie_name,"""""""The name of the cookie set by the session interface.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use ``app.config[""SESSION_COOKIE_NAME""]``
            instead.
        """"""","""""""
Returns the name of the session cookie.

This method is deprecated and will be removed in Flask 2.3. Instead, use
`app.config['SESSION_COOKIE_NAME']`.

Args:
    None

Returns:
    str: The name of the session cookie.
""""""",src/flask/app.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.6672024,def session_cookie_name,"""""""The name of the cookie set by the session interface.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use ``app.config[""SESSION_COOKIE_NAME""]``
            instead.
        """"""","""""""
Deprecation Notice:

The `session_cookie_name` method is deprecated and will be removed in Flask 2.3.
Use the 'SESSION_COOKIE_NAME' configuration option in 'app.config' instead.

Parameters:
value (str): The new session cookie name.

Returns:
None
""""""",src/flask/app.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.5199793,def send_file_max_age_default,"""""""The default value for ``max_age`` for :func:`~flask.send_file`. The default
        is ``None``, which tells the browser to use conditional requests instead of a
        timed cache.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use
            ``app.config[""SEND_FILE_MAX_AGE_DEFAULT""]`` instead.

        .. versionchanged:: 2.0
            Defaults to ``None`` instead of 12 hours.
        """"""","""""""
Deprecation Notice:

The `send_file_max_age_default` method is deprecated and will be removed in Flask 2.3.
Use 'SEND_FILE_MAX_AGE_DEFAULT' in 'app.config' instead.

Returns:
    Optional[timedelta]: The maximum age for sending files, or None if not set.

Raises:
    DeprecationWarning: If the deprecated method is called.

Note:
This function is only available for backwards compatibility and should not be used in new code.
""""""",src/flask/app.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.5927904,def send_file_max_age_default,"""""""The default value for ``max_age`` for :func:`~flask.send_file`. The default
        is ``None``, which tells the browser to use conditional requests instead of a
        timed cache.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use
            ``app.config[""SEND_FILE_MAX_AGE_DEFAULT""]`` instead.

        .. versionchanged:: 2.0
            Defaults to ``None`` instead of 12 hours.
        """"""","""""""
Deprecation Notice:

The `send_file_max_age_default` method is deprecated and will be removed in Flask 2.3.
Use 'SEND_FILE_MAX_AGE_DEFAULT' in 'app.config' instead.

Parameters:
    value (Union[int, timedelta, None]): The maximum age of sent files in seconds.
        If int, the value is used directly as a number of seconds.
        If timedelta, the value is converted to seconds.
        If None, no default is set.

Returns:
    None
""""""",src/flask/app.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.5998347,def use_x_sendfile,"""""""Enable this to use the ``X-Sendfile`` feature, assuming the server supports
        it, from :func:`~flask.send_file`.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use ``app.config[""USE_X_SENDFILE""]`` instead.
        """"""","""""""
Deprecation Notice:

The `use_x_sendfile` method is deprecated and will be removed in Flask 2.3.
Instead, use the 'USE_X_SENDFILE' configuration option in the application's
configuration dictionary.

Returns:
    bool: The value of the 'USE_X_SENDFILE' configuration option.

Raises:
    DeprecationWarning: If the 'use_x_sendfile' method is called.
""""""",src/flask/app.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.53567064,def json_encoder,"""""""The JSON encoder class to use. Defaults to
        :class:`~flask.json.JSONEncoder`.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Returns the JSON encoder class for this application.

This method is deprecated in favor of customizing 'app.json_provider_class' or 'app.json'.
The `DeprecationWarning` will be raised when calling this function.
 
Args:
    None
 
Returns:
    t.Type[json.JSONEncoder]: The JSON encoder class.
""""""",src/flask/app.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.6460945,def json_encoder,"""""""The JSON encoder class to use. Defaults to
        :class:`~flask.json.JSONEncoder`.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Deprecation Warning: `json_encoder` is deprecated and will be removed in Flask 2.3.
Customize `json_provider_class` or `json` instead.

Args:
    value (t.Type[json.JSONEncoder]): The new JSON encoder class to use.

Returns:
    None
""""""",src/flask/app.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.59121025,def json_decoder,"""""""The JSON decoder class to use. Defaults to
        :class:`~flask.json.JSONDecoder`.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Returns the JSON decoder class.

This function returns the JSON decoder class used by the application. It is deprecated in favor of customizing 'app.json_provider_class' or 'app.json'. 

Parameters:
    None

Returns:
    t.Type[json.JSONDecoder]: The JSON decoder class.

Raises:
    DeprecationWarning: If 'app.json_decoder' is called, it will raise a deprecation warning.
""""""",src/flask/app.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.5319964,def json_decoder,"""""""The JSON decoder class to use. Defaults to
        :class:`~flask.json.JSONDecoder`.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Decodes JSON data using the provided decoder.

This function is deprecated in Flask 2.3 and will be removed.
Instead, customize `app.json_provider_class` or `app.json`.

Args:
    value (t.Type[json.JSONDecoder]): The JSON decoder to use.

Returns:
    None
""""""",src/flask/app.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.5253534,def propagate_exceptions,"""""""Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration
        value in case it's set, otherwise a sensible default is returned.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3.

        .. versionadded:: 0.7
        """"""","""""""
Propagates exceptions to the application's context.

This function checks the value of `PROPAGATE_EXCEPTIONS` in the Flask configuration.
If it exists, its value is returned. Otherwise, the function returns whether the application is running in testing or debug mode.

Deprecation Warning: This method is deprecated and will be removed in Flask 2.3. It's recommended to use a different approach for exception propagation.

Args:
    None

Returns:
    bool: Whether exceptions should be propagated to the application's context.
""""""",src/flask/app.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.51215386,def templates_auto_reload,"""""""Reload templates when they are changed. Used by
        :meth:`create_jinja_environment`. It is enabled by default in debug mode.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use ``app.config[""TEMPLATES_AUTO_RELOAD""]``
            instead.

        .. versionadded:: 1.0
            This property was added but the underlying config and behavior
            already existed.
        """"""","""""""
Returns the value of `TEMPLATES_AUTO_RELOAD` from the application configuration.

If `TEMPLATES_AUTO_RELOAD` is set, its value is returned. Otherwise, the value of `debug` is used as a fallback.

Deprecated since Flask 2.3 in favor of using `TEMPLATES_AUTO_RELOAD` in `app.config`.

Args:
    None

Returns:
    bool: The value of `TEMPLATES_AUTO_RELOAD` or `debug` if not set.
""""""",src/flask/app.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.53665113,def env,"""""""What environment the app is running in. This maps to the :data:`ENV` config
        key.

        **Do not enable development when deploying in production.**

        Default: ``'production'``

        .. deprecated:: 2.2
            Will be removed in Flask 2.3.
        """"""","""""""
Returns the environment variable as a string.

Deprecation Warning: This method is deprecated and will be removed in Flask 2.3.
Use `app.debug` instead.

Args:
    None

Returns:
    str: The environment variable value.

Raises:
    DeprecationWarning: If the 'app.env' method is called.
""""""",src/flask/app.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.42823496,def env,"""""""What environment the app is running in. This maps to the :data:`ENV` config
        key.

        **Do not enable development when deploying in production.**

        Default: ``'production'``

        .. deprecated:: 2.2
            Will be removed in Flask 2.3.
        """"""","""""""
Deprecation Warning: `env` method is deprecated and will be removed in Flask 2.3.
Use `debug` attribute instead.

Args:
    value (str): The environment variable to set.

Returns:
    None
""""""",src/flask/app.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.6046043,def before_first_request,"""""""Registers a function to be run before the first request to this
        instance of the application.

        The function will be called without any arguments and its return
        value is ignored.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Run setup code when creating
            the application instead.

        .. versionadded:: 0.8
        """"""","""""""
Deprecation Warning: before_first_request function is deprecated and will be removed in Flask 2.3.
 
   To avoid deprecation warnings, run setup code while creating the application instead.

   Parameters:
       f (T_before_first_request): The function to be executed before the first request.

   Returns:
       T_before_first_request: The input function for appending to self.before_first_request_funcs.

   Note:
       This function is deprecated and should not be used in new applications. Instead, run setup code while creating the application.
""""""",src/flask/app.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.62594527,def json_encoder,"""""""Blueprint-local JSON encoder class to use. Set to ``None`` to use the app's.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Returns the JSON encoder class, deprecation warning if applicable.

This function is deprecated and will be removed in Flask 2.3. It's recommended to customize 'app.json_provider_class' or 'app.json' instead.

Args:
    None

Returns:
    t.Union[t.Type[json.JSONEncoder], None]: The JSON encoder class or None.
""""""",src/flask/blueprints.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.66514444,def json_encoder,"""""""Blueprint-local JSON encoder class to use. Set to ``None`` to use the app's.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Deprecation Warning: json_encoder function is deprecated and will be removed in Flask 2.3.
 
To customize the JSON encoding behavior, use either 'app.json_provider_class' or 'app.json' instead.

Args:
    value (Union[Type[JSONEncoder], None]): The JSON encoder class to use. Defaults to None.

Returns:
    None
""""""",src/flask/blueprints.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.62516713,def json_decoder,"""""""Blueprint-local JSON decoder class to use. Set to ``None`` to use the app's.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Decodes JSON values.

This function is deprecated and will be removed in Flask 2.3.
Instead, customize `app.json_provider_class` or `app.json`.

Args:
    value (t.Union[t.Type[json.JSONDecoder], None]): The JSON decoder to use.

Returns:
    None
""""""",src/flask/blueprints.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.6416527,def before_app_first_request,"""""""Register a function to run before the first request to the application is
        handled by the worker. Equivalent to :meth:`.Flask.before_first_request`.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Run setup code when creating
            the application instead.
        """"""","""""""
Deprecation Notice:

The `before_app_first_request` function is deprecated and will be removed in Flask 2.3.
Use the `record_once` method instead to run setup code when registering a blueprint.

Parameters:
f (T_before_first_request): The function to register for before first request.

Returns:
T_before_first_request: The registered function.

Raises:
DeprecationWarning: If the function is deprecated and should be replaced with `record_once`.
""""""",src/flask/blueprints.py,18e6493d69d2f86eb07d5d6599ff32b39d34845e
0.57756054,def logger,"""""""A standard Python :class:`~logging.Logger` for the app, with
        the same name as :attr:`name`.

        In debug mode, the logger's :attr:`~logging.Logger.level` will
        be set to :data:`~logging.DEBUG`.

        If there are no handlers configured, a default handler will be
        added. See :doc:`/logging` for more information.

        .. versionchanged:: 1.1.0
            The logger takes the same name as :attr:`name` rather than
            hard-coding ``""flask.app""``.

        .. versionchanged:: 1.0.0
            Behavior was simplified. The logger is always named
            ``""flask.app""``. The level is only set during configuration,
            it doesn't check ``app.debug`` each time. Only one format is
            used, not different ones depending on ``app.debug``. No
            handlers are removed, and a handler is only added if no
            handlers are already configured.

        .. versionadded:: 0.3
        """"""","""""""
Returns an instance of the Logger class.

This method is used to initialize and return a new logger object. The logger object is created using the `create_logger` function, which takes the current object (`self`) as an argument.

Args:
    self: The current object.

Returns:
    logging.Logger: An instance of the Logger class.
""""""",src/flask/app.py,4b0604bf2e1e5a17f262a6e4362c60c98d1a6ff5
0.43489042,def jinja_env,"""""""The Jinja environment used to load templates.

        The environment is created the first time this property is
        accessed. Changing :attr:`jinja_options` after that will have no
        effect.
        """"""","""""""
Returns an instance of Jinja2's Environment class.

This method is a wrapper around `create_jinja_environment` and provides a more Pythonic interface for creating a new Jinja environment. The returned environment can be used to compile templates, render templates with data, and perform other template-related tasks.

Note: This method does not create a new environment instance; it simply delegates the creation to the underlying `create_jinja_environment` method.
""""""",src/flask/app.py,4b0604bf2e1e5a17f262a6e4362c60c98d1a6ff5
0.73752147,def session_cookie_name,"""""""The name of the cookie set by the session interface.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use ``app.config[""SESSION_COOKIE_NAME""]``
            instead.
        """"""","""""""
Returns the name of the session cookie.

This method is deprecated and will be removed in Flask 2.3. Instead, use
`app.config['SESSION_COOKIE_NAME']`.

Args:
    None

Returns:
    str: The name of the session cookie.
""""""",src/flask/app.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.6672024,def session_cookie_name,"""""""The name of the cookie set by the session interface.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use ``app.config[""SESSION_COOKIE_NAME""]``
            instead.
        """"""","""""""
Deprecation Notice:

The `session_cookie_name` method is deprecated and will be removed in Flask 2.3.
Use the 'SESSION_COOKIE_NAME' configuration option in 'app.config' instead.

Parameters:
value (str): The new session cookie name.

Returns:
None
""""""",src/flask/app.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.5199793,def send_file_max_age_default,"""""""The default value for ``max_age`` for :func:`~flask.send_file`. The default
        is ``None``, which tells the browser to use conditional requests instead of a
        timed cache.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use
            ``app.config[""SEND_FILE_MAX_AGE_DEFAULT""]`` instead.

        .. versionchanged:: 2.0
            Defaults to ``None`` instead of 12 hours.
        """"""","""""""
Deprecation Notice:

The `send_file_max_age_default` method is deprecated and will be removed in Flask 2.3.
Use 'SEND_FILE_MAX_AGE_DEFAULT' in 'app.config' instead.

Returns:
    Optional[timedelta]: The maximum age for sending files, or None if not set.

Raises:
    DeprecationWarning: If the deprecated method is called.

Note:
This function is only available for backwards compatibility and should not be used in new code.
""""""",src/flask/app.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.5927904,def send_file_max_age_default,"""""""The default value for ``max_age`` for :func:`~flask.send_file`. The default
        is ``None``, which tells the browser to use conditional requests instead of a
        timed cache.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use
            ``app.config[""SEND_FILE_MAX_AGE_DEFAULT""]`` instead.

        .. versionchanged:: 2.0
            Defaults to ``None`` instead of 12 hours.
        """"""","""""""
Deprecation Notice:

The `send_file_max_age_default` method is deprecated and will be removed in Flask 2.3.
Use 'SEND_FILE_MAX_AGE_DEFAULT' in 'app.config' instead.

Parameters:
    value (Union[int, timedelta, None]): The maximum age of sent files in seconds.
        If int, the value is used directly as a number of seconds.
        If timedelta, the value is converted to seconds.
        If None, no default is set.

Returns:
    None
""""""",src/flask/app.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.5998347,def use_x_sendfile,"""""""Enable this to use the ``X-Sendfile`` feature, assuming the server supports
        it, from :func:`~flask.send_file`.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use ``app.config[""USE_X_SENDFILE""]`` instead.
        """"""","""""""
Deprecation Notice:

The `use_x_sendfile` method is deprecated and will be removed in Flask 2.3.
Instead, use the 'USE_X_SENDFILE' configuration option in the application's
configuration dictionary.

Returns:
    bool: The value of the 'USE_X_SENDFILE' configuration option.

Raises:
    DeprecationWarning: If the 'use_x_sendfile' method is called.
""""""",src/flask/app.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.53567064,def json_encoder,"""""""The JSON encoder class to use. Defaults to
        :class:`~flask.json.JSONEncoder`.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Returns the JSON encoder class for this application.

This method is deprecated in favor of customizing 'app.json_provider_class' or 'app.json'.
The `DeprecationWarning` will be raised when calling this function.
 
Args:
    None
 
Returns:
    t.Type[json.JSONEncoder]: The JSON encoder class.
""""""",src/flask/app.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.6460945,def json_encoder,"""""""The JSON encoder class to use. Defaults to
        :class:`~flask.json.JSONEncoder`.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Deprecation Warning: `json_encoder` is deprecated and will be removed in Flask 2.3.
Customize `json_provider_class` or `json` instead.

Args:
    value (t.Type[json.JSONEncoder]): The new JSON encoder class to use.

Returns:
    None
""""""",src/flask/app.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.59121025,def json_decoder,"""""""The JSON decoder class to use. Defaults to
        :class:`~flask.json.JSONDecoder`.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Returns the JSON decoder class.

This function returns the JSON decoder class used by the application. It is deprecated in favor of customizing 'app.json_provider_class' or 'app.json'. 

Parameters:
    None

Returns:
    t.Type[json.JSONDecoder]: The JSON decoder class.

Raises:
    DeprecationWarning: If 'app.json_decoder' is called, it will raise a deprecation warning.
""""""",src/flask/app.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.5319964,def json_decoder,"""""""The JSON decoder class to use. Defaults to
        :class:`~flask.json.JSONDecoder`.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Decodes JSON data using the provided decoder.

This function is deprecated in Flask 2.3 and will be removed.
Instead, customize `app.json_provider_class` or `app.json`.

Args:
    value (t.Type[json.JSONDecoder]): The JSON decoder to use.

Returns:
    None
""""""",src/flask/app.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.5253534,def propagate_exceptions,"""""""Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration
        value in case it's set, otherwise a sensible default is returned.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3.

        .. versionadded:: 0.7
        """"""","""""""
Propagates exceptions to the application's context.

This function checks the value of `PROPAGATE_EXCEPTIONS` in the Flask configuration.
If it exists, its value is returned. Otherwise, the function returns whether the application is running in testing or debug mode.

Deprecation Warning: This method is deprecated and will be removed in Flask 2.3. It's recommended to use a different approach for exception propagation.

Args:
    None

Returns:
    bool: Whether exceptions should be propagated to the application's context.
""""""",src/flask/app.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.51215386,def templates_auto_reload,"""""""Reload templates when they are changed. Used by
        :meth:`create_jinja_environment`. It is enabled by default in debug mode.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use ``app.config[""TEMPLATES_AUTO_RELOAD""]``
            instead.

        .. versionadded:: 1.0
            This property was added but the underlying config and behavior
            already existed.
        """"""","""""""
Returns the value of `TEMPLATES_AUTO_RELOAD` from the application configuration.

If `TEMPLATES_AUTO_RELOAD` is set, its value is returned. Otherwise, the value of `debug` is used as a fallback.

Deprecated since Flask 2.3 in favor of using `TEMPLATES_AUTO_RELOAD` in `app.config`.

Args:
    None

Returns:
    bool: The value of `TEMPLATES_AUTO_RELOAD` or `debug` if not set.
""""""",src/flask/app.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.53665113,def env,"""""""What environment the app is running in. This maps to the :data:`ENV` config
        key.

        **Do not enable development when deploying in production.**

        Default: ``'production'``

        .. deprecated:: 2.2
            Will be removed in Flask 2.3.
        """"""","""""""
Returns the environment variable as a string.

Deprecation Warning: This method is deprecated and will be removed in Flask 2.3.
Use `app.debug` instead.

Args:
    None

Returns:
    str: The environment variable value.

Raises:
    DeprecationWarning: If the 'app.env' method is called.
""""""",src/flask/app.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.42823496,def env,"""""""What environment the app is running in. This maps to the :data:`ENV` config
        key.

        **Do not enable development when deploying in production.**

        Default: ``'production'``

        .. deprecated:: 2.2
            Will be removed in Flask 2.3.
        """"""","""""""
Deprecation Warning: `env` method is deprecated and will be removed in Flask 2.3.
Use `debug` attribute instead.

Args:
    value (str): The environment variable to set.

Returns:
    None
""""""",src/flask/app.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.6046043,def before_first_request,"""""""Registers a function to be run before the first request to this
        instance of the application.

        The function will be called without any arguments and its return
        value is ignored.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Run setup code when creating
            the application instead.

        .. versionadded:: 0.8
        """"""","""""""
Deprecation Warning: before_first_request function is deprecated and will be removed in Flask 2.3.
 
   To avoid deprecation warnings, run setup code while creating the application instead.

   Parameters:
       f (T_before_first_request): The function to be executed before the first request.

   Returns:
       T_before_first_request: The input function for appending to self.before_first_request_funcs.

   Note:
       This function is deprecated and should not be used in new applications. Instead, run setup code while creating the application.
""""""",src/flask/app.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.62594527,def json_encoder,"""""""Blueprint-local JSON encoder class to use. Set to ``None`` to use the app's.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Returns the JSON encoder class, deprecation warning if applicable.

This function is deprecated and will be removed in Flask 2.3. It's recommended to customize 'app.json_provider_class' or 'app.json' instead.

Args:
    None

Returns:
    t.Union[t.Type[json.JSONEncoder], None]: The JSON encoder class or None.
""""""",src/flask/blueprints.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.66514444,def json_encoder,"""""""Blueprint-local JSON encoder class to use. Set to ``None`` to use the app's.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Deprecation Warning: json_encoder function is deprecated and will be removed in Flask 2.3.
 
To customize the JSON encoding behavior, use either 'app.json_provider_class' or 'app.json' instead.

Args:
    value (Union[Type[JSONEncoder], None]): The JSON encoder class to use. Defaults to None.

Returns:
    None
""""""",src/flask/blueprints.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.62516713,def json_decoder,"""""""Blueprint-local JSON decoder class to use. Set to ``None`` to use the app's.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Decodes JSON values.

This function is deprecated and will be removed in Flask 2.3.
Instead, customize `app.json_provider_class` or `app.json`.

Args:
    value (t.Union[t.Type[json.JSONDecoder], None]): The JSON decoder to use.

Returns:
    None
""""""",src/flask/blueprints.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.6416527,def before_app_first_request,"""""""Register a function to run before the first request to the application is
        handled by the worker. Equivalent to :meth:`.Flask.before_first_request`.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Run setup code when creating
            the application instead.
        """"""","""""""
Deprecation Notice:

The `before_app_first_request` function is deprecated and will be removed in Flask 2.3.
Use the `record_once` method instead to run setup code when registering a blueprint.

Parameters:
f (T_before_first_request): The function to register for before first request.

Returns:
T_before_first_request: The registered function.

Raises:
DeprecationWarning: If the function is deprecated and should be replaced with `record_once`.
""""""",src/flask/blueprints.py,9661c014d17d124008ef7ef0d31588330dc0b148
0.57756054,def logger,"""""""A standard Python :class:`~logging.Logger` for the app, with
        the same name as :attr:`name`.

        In debug mode, the logger's :attr:`~logging.Logger.level` will
        be set to :data:`~logging.DEBUG`.

        If there are no handlers configured, a default handler will be
        added. See :doc:`/logging` for more information.

        .. versionchanged:: 1.1.0
            The logger takes the same name as :attr:`name` rather than
            hard-coding ``""flask.app""``.

        .. versionchanged:: 1.0.0
            Behavior was simplified. The logger is always named
            ``""flask.app""``. The level is only set during configuration,
            it doesn't check ``app.debug`` each time. Only one format is
            used, not different ones depending on ``app.debug``. No
            handlers are removed, and a handler is only added if no
            handlers are already configured.

        .. versionadded:: 0.3
        """"""","""""""
Returns an instance of the Logger class.

This method is used to initialize and return a new logger object. The logger object is created using the `create_logger` function, which takes the current object (`self`) as an argument.

Args:
    self: The current object.

Returns:
    logging.Logger: An instance of the Logger class.
""""""",src/flask/app.py,fe46778c2c83493a10730e7bf79802a2acbb6da3
0.43489042,def jinja_env,"""""""The Jinja environment used to load templates.

        The environment is created the first time this property is
        accessed. Changing :attr:`jinja_options` after that will have no
        effect.
        """"""","""""""
Returns an instance of Jinja2's Environment class.

This method is a wrapper around `create_jinja_environment` and provides a more Pythonic interface for creating a new Jinja environment. The returned environment can be used to compile templates, render templates with data, and perform other template-related tasks.

Note: This method does not create a new environment instance; it simply delegates the creation to the underlying `create_jinja_environment` method.
""""""",src/flask/app.py,fe46778c2c83493a10730e7bf79802a2acbb6da3
0.61241263,def full_dispatch_request,"""""""Dispatches the request and on top of that performs request
        pre and postprocessing as well as HTTP exception catching and
        error handling.

        .. versionadded:: 0.7
        """"""","""""""
Dispatches the full request, including running before_first_request functions and handling exceptions.
        # Run before_first_request functions if this is the thread's first request.
        # Inlined to avoid a method call on subsequent requests.
        # This is deprecated, will be removed in Flask 2.3.
        if not self._got_first_request:
            with self._before_request_lock:
                if not self._got_first_request:
                    for func in self.before_first_request_funcs:
                        self.ensure_sync(func)()

This method is deprecated in favor of a more efficient implementation. It should not be used in new code.

Parameters
self : object
    The instance of the class that this method belongs to.

Returns
Response
    The response from the dispatching process.
""""""",src/flask/app.py,af9ade8370272e8f4a6ac7b412467f80c72d4b7c
0.61241263,def full_dispatch_request,"""""""Dispatches the request and on top of that performs request
        pre and postprocessing as well as HTTP exception catching and
        error handling.

        .. versionadded:: 0.7
        """"""","""""""
Dispatches the full request, including running before_first_request functions and handling exceptions.
        # Run before_first_request functions if this is the thread's first request.
        # Inlined to avoid a method call on subsequent requests.
        # This is deprecated, will be removed in Flask 2.3.
        if not self._got_first_request:
            with self._before_request_lock:
                if not self._got_first_request:
                    for func in self.before_first_request_funcs:
                        self.ensure_sync(func)()

This method is deprecated in favor of a more efficient implementation. It should not be used in new code.

Parameters
self : object
    The instance of the class that this method belongs to.

Returns
Response
    The response from the dispatching process.
""""""",src/flask/app.py,1991471fdaf41ea050ab7c09ad416478c6e5803a
0.57930773,def is_ip,"""""""Determine if the given string is an IP address.

    :param value: value to check
    :type value: str

    :return: True if string is an IP address
    :rtype: bool

    .. deprecated:: 2.3
        Will be removed in Flask 2.4.
    """"""","""""""
Checks if the provided string is a valid IP address.

This function uses the `socket` module to perform the validation.
It supports both IPv4 and IPv6 addresses.

Args:
    value (str): The IP address to be validated.

Returns:
    bool: True if the IP address is valid, False otherwise.

Deprecation Warning: This function is deprecated and will be removed in Flask 2.4.
""""""",src/flask/helpers.py,f036f17649bef8e6f2edac0137b3d1dd86ab77b4
0.6107662,def get_cookie_domain,"""""""The value of the ``Domain`` parameter on the session cookie. If not set,
        browsers will only send the cookie to the exact domain it was set from.
        Otherwise, they will send it to any subdomain of the given value as well.

        Uses the :data:`SESSION_COOKIE_DOMAIN` config.

        .. versionchanged:: 2.3
            Not set by default, does not fall back to ``SERVER_NAME``.
        """"""","""""""
Returns the domain of the session cookie for a given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    Optional[str]: The domain of the session cookie, or None if not set.
""""""",src/flask/sessions.py,f036f17649bef8e6f2edac0137b3d1dd86ab77b4
0.73752147,def session_cookie_name,"""""""The name of the cookie set by the session interface.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use ``app.config[""SESSION_COOKIE_NAME""]``
            instead.
        """"""","""""""
Returns the name of the session cookie.

This method is deprecated and will be removed in Flask 2.3. Instead, use
`app.config['SESSION_COOKIE_NAME']`.

Args:
    None

Returns:
    str: The name of the session cookie.
""""""",src/flask/app.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.6672024,def session_cookie_name,"""""""The name of the cookie set by the session interface.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use ``app.config[""SESSION_COOKIE_NAME""]``
            instead.
        """"""","""""""
Deprecation Notice:

The `session_cookie_name` method is deprecated and will be removed in Flask 2.3.
Use the 'SESSION_COOKIE_NAME' configuration option in 'app.config' instead.

Parameters:
value (str): The new session cookie name.

Returns:
None
""""""",src/flask/app.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.5199793,def send_file_max_age_default,"""""""The default value for ``max_age`` for :func:`~flask.send_file`. The default
        is ``None``, which tells the browser to use conditional requests instead of a
        timed cache.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use
            ``app.config[""SEND_FILE_MAX_AGE_DEFAULT""]`` instead.

        .. versionchanged:: 2.0
            Defaults to ``None`` instead of 12 hours.
        """"""","""""""
Deprecation Notice:

The `send_file_max_age_default` method is deprecated and will be removed in Flask 2.3.
Use 'SEND_FILE_MAX_AGE_DEFAULT' in 'app.config' instead.

Returns:
    Optional[timedelta]: The maximum age for sending files, or None if not set.

Raises:
    DeprecationWarning: If the deprecated method is called.

Note:
This function is only available for backwards compatibility and should not be used in new code.
""""""",src/flask/app.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.5927904,def send_file_max_age_default,"""""""The default value for ``max_age`` for :func:`~flask.send_file`. The default
        is ``None``, which tells the browser to use conditional requests instead of a
        timed cache.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use
            ``app.config[""SEND_FILE_MAX_AGE_DEFAULT""]`` instead.

        .. versionchanged:: 2.0
            Defaults to ``None`` instead of 12 hours.
        """"""","""""""
Deprecation Notice:

The `send_file_max_age_default` method is deprecated and will be removed in Flask 2.3.
Use 'SEND_FILE_MAX_AGE_DEFAULT' in 'app.config' instead.

Parameters:
    value (Union[int, timedelta, None]): The maximum age of sent files in seconds.
        If int, the value is used directly as a number of seconds.
        If timedelta, the value is converted to seconds.
        If None, no default is set.

Returns:
    None
""""""",src/flask/app.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.5998347,def use_x_sendfile,"""""""Enable this to use the ``X-Sendfile`` feature, assuming the server supports
        it, from :func:`~flask.send_file`.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use ``app.config[""USE_X_SENDFILE""]`` instead.
        """"""","""""""
Deprecation Notice:

The `use_x_sendfile` method is deprecated and will be removed in Flask 2.3.
Instead, use the 'USE_X_SENDFILE' configuration option in the application's
configuration dictionary.

Returns:
    bool: The value of the 'USE_X_SENDFILE' configuration option.

Raises:
    DeprecationWarning: If the 'use_x_sendfile' method is called.
""""""",src/flask/app.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.53567064,def json_encoder,"""""""The JSON encoder class to use. Defaults to
        :class:`~flask.json.JSONEncoder`.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Returns the JSON encoder class for this application.

This method is deprecated in favor of customizing 'app.json_provider_class' or 'app.json'.
The `DeprecationWarning` will be raised when calling this function.
 
Args:
    None
 
Returns:
    t.Type[json.JSONEncoder]: The JSON encoder class.
""""""",src/flask/app.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.6460945,def json_encoder,"""""""The JSON encoder class to use. Defaults to
        :class:`~flask.json.JSONEncoder`.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Deprecation Warning: `json_encoder` is deprecated and will be removed in Flask 2.3.
Customize `json_provider_class` or `json` instead.

Args:
    value (t.Type[json.JSONEncoder]): The new JSON encoder class to use.

Returns:
    None
""""""",src/flask/app.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.59121025,def json_decoder,"""""""The JSON decoder class to use. Defaults to
        :class:`~flask.json.JSONDecoder`.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Returns the JSON decoder class.

This function returns the JSON decoder class used by the application. It is deprecated in favor of customizing 'app.json_provider_class' or 'app.json'. 

Parameters:
    None

Returns:
    t.Type[json.JSONDecoder]: The JSON decoder class.

Raises:
    DeprecationWarning: If 'app.json_decoder' is called, it will raise a deprecation warning.
""""""",src/flask/app.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.5319964,def json_decoder,"""""""The JSON decoder class to use. Defaults to
        :class:`~flask.json.JSONDecoder`.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Decodes JSON data using the provided decoder.

This function is deprecated in Flask 2.3 and will be removed.
Instead, customize `app.json_provider_class` or `app.json`.

Args:
    value (t.Type[json.JSONDecoder]): The JSON decoder to use.

Returns:
    None
""""""",src/flask/app.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.5253534,def propagate_exceptions,"""""""Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration
        value in case it's set, otherwise a sensible default is returned.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3.

        .. versionadded:: 0.7
        """"""","""""""
Propagates exceptions to the application's context.

This function checks the value of `PROPAGATE_EXCEPTIONS` in the Flask configuration.
If it exists, its value is returned. Otherwise, the function returns whether the application is running in testing or debug mode.

Deprecation Warning: This method is deprecated and will be removed in Flask 2.3. It's recommended to use a different approach for exception propagation.

Args:
    None

Returns:
    bool: Whether exceptions should be propagated to the application's context.
""""""",src/flask/app.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.51215386,def templates_auto_reload,"""""""Reload templates when they are changed. Used by
        :meth:`create_jinja_environment`. It is enabled by default in debug mode.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Use ``app.config[""TEMPLATES_AUTO_RELOAD""]``
            instead.

        .. versionadded:: 1.0
            This property was added but the underlying config and behavior
            already existed.
        """"""","""""""
Returns the value of `TEMPLATES_AUTO_RELOAD` from the application configuration.

If `TEMPLATES_AUTO_RELOAD` is set, its value is returned. Otherwise, the value of `debug` is used as a fallback.

Deprecated since Flask 2.3 in favor of using `TEMPLATES_AUTO_RELOAD` in `app.config`.

Args:
    None

Returns:
    bool: The value of `TEMPLATES_AUTO_RELOAD` or `debug` if not set.
""""""",src/flask/app.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.53665113,def env,"""""""What environment the app is running in. This maps to the :data:`ENV` config
        key.

        **Do not enable development when deploying in production.**

        Default: ``'production'``

        .. deprecated:: 2.2
            Will be removed in Flask 2.3.
        """"""","""""""
Returns the environment variable as a string.

Deprecation Warning: This method is deprecated and will be removed in Flask 2.3.
Use `app.debug` instead.

Args:
    None

Returns:
    str: The environment variable value.

Raises:
    DeprecationWarning: If the 'app.env' method is called.
""""""",src/flask/app.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.42823496,def env,"""""""What environment the app is running in. This maps to the :data:`ENV` config
        key.

        **Do not enable development when deploying in production.**

        Default: ``'production'``

        .. deprecated:: 2.2
            Will be removed in Flask 2.3.
        """"""","""""""
Deprecation Warning: `env` method is deprecated and will be removed in Flask 2.3.
Use `debug` attribute instead.

Args:
    value (str): The environment variable to set.

Returns:
    None
""""""",src/flask/app.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.6046043,def before_first_request,"""""""Registers a function to be run before the first request to this
        instance of the application.

        The function will be called without any arguments and its return
        value is ignored.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Run setup code when creating
            the application instead.

        .. versionadded:: 0.8
        """"""","""""""
Deprecation Warning: before_first_request function is deprecated and will be removed in Flask 2.3.
 
   To avoid deprecation warnings, run setup code while creating the application instead.

   Parameters:
       f (T_before_first_request): The function to be executed before the first request.

   Returns:
       T_before_first_request: The input function for appending to self.before_first_request_funcs.

   Note:
       This function is deprecated and should not be used in new applications. Instead, run setup code while creating the application.
""""""",src/flask/app.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.62594527,def json_encoder,"""""""Blueprint-local JSON encoder class to use. Set to ``None`` to use the app's.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Returns the JSON encoder class, deprecation warning if applicable.

This function is deprecated and will be removed in Flask 2.3. It's recommended to customize 'app.json_provider_class' or 'app.json' instead.

Args:
    None

Returns:
    t.Union[t.Type[json.JSONEncoder], None]: The JSON encoder class or None.
""""""",src/flask/blueprints.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.66514444,def json_encoder,"""""""Blueprint-local JSON encoder class to use. Set to ``None`` to use the app's.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Deprecation Warning: json_encoder function is deprecated and will be removed in Flask 2.3.
 
To customize the JSON encoding behavior, use either 'app.json_provider_class' or 'app.json' instead.

Args:
    value (Union[Type[JSONEncoder], None]): The JSON encoder class to use. Defaults to None.

Returns:
    None
""""""",src/flask/blueprints.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.62516713,def json_decoder,"""""""Blueprint-local JSON decoder class to use. Set to ``None`` to use the app's.

        .. deprecated:: 2.2
             Will be removed in Flask 2.3. Customize
             :attr:`json_provider_class` instead.

        .. versionadded:: 0.10
        """"""","""""""
Decodes JSON values.

This function is deprecated and will be removed in Flask 2.3.
Instead, customize `app.json_provider_class` or `app.json`.

Args:
    value (t.Union[t.Type[json.JSONDecoder], None]): The JSON decoder to use.

Returns:
    None
""""""",src/flask/blueprints.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.6416527,def before_app_first_request,"""""""Register a function to run before the first request to the application is
        handled by the worker. Equivalent to :meth:`.Flask.before_first_request`.

        .. deprecated:: 2.2
            Will be removed in Flask 2.3. Run setup code when creating
            the application instead.
        """"""","""""""
Deprecation Notice:

The `before_app_first_request` function is deprecated and will be removed in Flask 2.3.
Use the `record_once` method instead to run setup code when registering a blueprint.

Parameters:
f (T_before_first_request): The function to register for before first request.

Returns:
T_before_first_request: The registered function.

Raises:
DeprecationWarning: If the function is deprecated and should be replaced with `record_once`.
""""""",src/flask/blueprints.py,3c55c2f1a4d917a2d523d5cc8c3490c3342e41f5
0.57756054,def logger,"""""""A standard Python :class:`~logging.Logger` for the app, with
        the same name as :attr:`name`.

        In debug mode, the logger's :attr:`~logging.Logger.level` will
        be set to :data:`~logging.DEBUG`.

        If there are no handlers configured, a default handler will be
        added. See :doc:`/logging` for more information.

        .. versionchanged:: 1.1.0
            The logger takes the same name as :attr:`name` rather than
            hard-coding ``""flask.app""``.

        .. versionchanged:: 1.0.0
            Behavior was simplified. The logger is always named
            ``""flask.app""``. The level is only set during configuration,
            it doesn't check ``app.debug`` each time. Only one format is
            used, not different ones depending on ``app.debug``. No
            handlers are removed, and a handler is only added if no
            handlers are already configured.

        .. versionadded:: 0.3
        """"""","""""""
Returns an instance of the Logger class.

This method is used to initialize and return a new logger object. The logger object is created using the `create_logger` function, which takes the current object (`self`) as an argument.

Args:
    self: The current object.

Returns:
    logging.Logger: An instance of the Logger class.
""""""",src/flask/app.py,8fed0deecafe224c3fe2acbd10343998e796b843
0.43489042,def jinja_env,"""""""The Jinja environment used to load templates.

        The environment is created the first time this property is
        accessed. Changing :attr:`jinja_options` after that will have no
        effect.
        """"""","""""""
Returns an instance of Jinja2's Environment class.

This method is a wrapper around `create_jinja_environment` and provides a more Pythonic interface for creating a new Jinja environment. The returned environment can be used to compile templates, render templates with data, and perform other template-related tasks.

Note: This method does not create a new environment instance; it simply delegates the creation to the underlying `create_jinja_environment` method.
""""""",src/flask/app.py,8fed0deecafe224c3fe2acbd10343998e796b843
0.59874177,def abort,"""""""Raise an :exc:`~werkzeug.exceptions.HTTPException` for the given
    status code.

    If :data:`~flask.current_app` is available, it will call its
    :attr:`~flask.Flask.aborter` object, otherwise it will use
    :func:`werkzeug.exceptions.abort`.

    :param code: The status code for the exception, which must be
        registered in ``app.aborter``.
    :param args: Passed to the exception.
    :param kwargs: Passed to the exception.

    .. versionadded:: 2.2
        Calls ``current_app.aborter`` if available instead of always
        using Werkzeug's default ``abort``.
    """"""","""""""
Aborts the application with a given error code.

This function is used to terminate the application and return an error response.
It takes in an optional `code` parameter which specifies the error code,
as well as any additional arguments that may be required for the abort process.

Args:
    - code (int | BaseResponse): The error code to use for the abort.
    - *args: Additional positional arguments.
    - **kwargs: Additional keyword arguments.

Returns:
    None

Raises:
    NoReturn: If the application is not currently running, this function will raise a NoReturn exception.
""""""",src/flask/helpers.py,324208b26dfde4c8c65b7c92ac83dbd8d68d698e
0.5562934,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session cookie to the client's browser.

This method sets a session cookie based on the provided `app`, `session`, and `response` objects.
It determines the necessary cookie attributes (name, domain, path, secure, samesite, httponly) using
the `get_cookie_name`, `get_cookie_domain`, `get_cookie_path`, `get_cookie_secure`, 
`get_cookie_samesite`, and `get_cookie_httponly` methods.

If the session was accessed at all, it adds a ""Vary: Cookie"" header to the response.
If the session is empty or modified to be empty, it removes the cookie from the response.
Otherwise, it sets the cookie with the determined attributes and adds a ""Vary: Cookie"" header.

Parameters:
app (Flask): The Flask application instance.
session (SessionMixin): The session object being saved.
response (Response): The HTTP response object.

Returns:
None
""""""",src/flask/sessions.py,783d20111c26231dde06b823811411e33e47ff02
0.6832959,def make_null_session,"""""""Creates a null session which acts as a replacement object if the
        real session support could not be loaded due to a configuration
        error.  This mainly aids the user experience because the job of the
        null session is to still support lookup without complaining but
        modifications are answered with a helpful error message of what
        failed.

        This creates an instance of :attr:`null_session_class` by default.
        """"""","""""""
Creates and returns a null session instance for the given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    NullSession: A null session instance.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.6895287,def get_cookie_name,"""""""The name of the session cookie. Uses``app.config[""SESSION_COOKIE_NAME""]``.""""""","""""""
Returns the name of the cookie used to store session data in a Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    str: The name of the session cookie.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.68853897,def get_cookie_path,"""""""Returns the path for which the cookie should be valid.  The
        default implementation uses the value from the ``SESSION_COOKIE_PATH``
        config var if it's set, and falls back to ``APPLICATION_ROOT`` or
        uses ``/`` if it's ``None``.
        """"""","""""""
Returns the path of the cookie used by a Flask application.

If 'SESSION_COOKIE_PATH' is set in the application's configuration,
its value will be returned. Otherwise, the value of
'APPLICATION_ROOT' will be used as a fallback.

Args:
    app (Flask): The Flask application instance.

Returns:
    str: The path of the cookie.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.7083045,def get_cookie_httponly,"""""""Returns True if the session cookie should be httponly.  This
        currently just returns the value of the ``SESSION_COOKIE_HTTPONLY``
        config var.
        """"""","""""""
Returns whether the session cookie is set to be HTTP-only in the given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    bool: True if the session cookie is HTTP-only, False otherwise.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.7656,def get_cookie_secure,"""""""Returns True if the cookie should be secure.  This currently
        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.
        """"""","""""""
Returns whether the session cookie is secure.

This method checks if the `SESSION_COOKIE_SECURE` configuration variable
is set to True in the Flask application's configuration. If it is, the
session cookie will be transmitted over a secure protocol (HTTPS).

Args:
    app: The Flask application instance.

Returns:
    bool: Whether the session cookie is secure.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.5735377,def get_cookie_samesite,"""""""Return ``'Strict'`` or ``'Lax'`` if the cookie should use the
        ``SameSite`` attribute. This currently just returns the value of
        the :data:`SESSION_COOKIE_SAMESITE` setting.
        """"""","""""""
Returns the value of the `SESSION_COOKIE_SAMESITE` configuration option from the provided Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    str: The value of the `SESSION_COOKIE_SAMESITE` configuration option.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.6405388,def get_expiration_time,"""""""A helper method that returns an expiration date for the session
        or ``None`` if the session is linked to the browser session.  The
        default implementation returns now + the permanent session
        lifetime configured on the application.
        """"""","""""""
Returns the expiration time of a Flask session.

If the session is permanent, returns the current UTC time plus the permanent session lifetime.
Otherwise, returns None.

Args:
    self: The instance of the class that this method belongs to (not used in this implementation).
    app: A Flask application object.
    session: A SessionMixin object representing the session.

Returns:
    datetime: The expiration time of the session, or None if the session is not permanent.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.5696326,def open_session,"""""""This is called at the beginning of each request, after
        pushing the request context, before matching the URL.

        This must return an object which implements a dictionary-like
        interface as well as the :class:`SessionMixin` interface.

        This will return ``None`` to indicate that loading failed in
        some way that is not immediately an error. The request
        context will fall back to using :meth:`make_null_session`
        in this case.
        """"""","""""""
Opens a new session for the given Flask application and request.

Args:
    - `app`: The Flask application instance.
    - `request`: The HTTP request object.

Returns:
    An optional SessionMixin object, indicating whether a session was successfully opened. If not implemented by subclasses, raises NotImplementedError.

Raises:
    NotImplementedError: If the method is not implemented by subclasses.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.47505915,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session.

This method is intended to be overridden by subclasses. It takes in the Flask application,
the session object, and the response object as parameters. The implementation of this
method should be provided by the subclass.

Parameters:
app (Flask): The Flask application instance.
session (SessionMixin): The session object.
response (Response): The response object.

Returns:
None

Raises:
NotImplementedError: This method is intended to be overridden and should not be called directly.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.49295735,def open_session,"""""""This is called at the beginning of each request, after
        pushing the request context, before matching the URL.

        This must return an object which implements a dictionary-like
        interface as well as the :class:`SessionMixin` interface.

        This will return ``None`` to indicate that loading failed in
        some way that is not immediately an error. The request
        context will fall back to using :meth:`make_null_session`
        in this case.
        """"""","""""""
Opens a new session for the given Flask application and request.

Args:
    app (Flask): The Flask application instance.
    request (Request): The HTTP request object.

Returns:
    t.Optional[SecureCookieSession]: The opened session, or None if creation fails.
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.50979596,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session cookie to the client's browser.

This method sets a session cookie based on the provided `app`, `session`, and `response` objects.
It determines the necessary cookie attributes (name, domain, path, secure, samesite, httponly) using
the `get_cookie_name`, `get_cookie_domain`, `get_cookie_path`, `get_cookie_secure`, 
`get_cookie_samesite`, and `get_cookie_httponly` methods.

Parameters:
app (Flask): The Flask application instance.
session (SessionMixin): The session object being saved.
response (Response): The HTTP response object.

Returns:
None
""""""",src/flask/sessions.py,76e12bb4372692bef31a46a90333ee3cde90c7f0
0.61847794,def make_null_session,"""""""Creates a null session which acts as a replacement object if the
        real session support could not be loaded due to a configuration
        error.  This mainly aids the user experience because the job of the
        null session is to still support lookup without complaining but
        modifications are answered with a helpful error message of what
        failed.

        This creates an instance of :attr:`null_session_class` by default.
        """"""","""""""
Creates and returns a null session instance for the given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    NullSession: A null session instance.

Raises:
    TypeError: If the provided `app` is not an instance of Flask.

Note:
This method creates a new instance of the `NullSession` class, which does not store any data. It is intended for use in testing or other scenarios where no session data needs to be stored.
""""""",src/flask/sessions.py,223f05ba6a9f2fdf4bdbbb8072a3526458363344
0.59373665,def get_cookie_domain,"""""""The value of the ``Domain`` parameter on the session cookie. If not set,
        browsers will only send the cookie to the exact domain it was set from.
        Otherwise, they will send it to any subdomain of the given value as well.

        Uses the :data:`SESSION_COOKIE_DOMAIN` config.

        .. versionchanged:: 2.3
            Not set by default, does not fall back to ``SERVER_NAME``.
        """"""","""""""
Returns the domain of the session cookie from a given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    str | None: The domain of the session cookie, or None if not set.
""""""",src/flask/sessions.py,223f05ba6a9f2fdf4bdbbb8072a3526458363344
0.7656,def get_cookie_secure,"""""""Returns True if the cookie should be secure.  This currently
        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.
        """"""","""""""
Returns whether the session cookie is secure.

This method checks if the `SESSION_COOKIE_SECURE` configuration variable
is set to True in the Flask application's configuration. If it is, the
session cookie will be transmitted over a secure protocol (HTTPS).

Args:
    app: The Flask application instance.

Returns:
    bool: Whether the session cookie is secure.
""""""",src/flask/sessions.py,223f05ba6a9f2fdf4bdbbb8072a3526458363344
0.5696326,def open_session,"""""""This is called at the beginning of each request, after
        pushing the request context, before matching the URL.

        This must return an object which implements a dictionary-like
        interface as well as the :class:`SessionMixin` interface.

        This will return ``None`` to indicate that loading failed in
        some way that is not immediately an error. The request
        context will fall back to using :meth:`make_null_session`
        in this case.
        """"""","""""""
Opens a new session for the given Flask application and request.

Args:
    - `app`: The Flask application instance.
    - `request`: The HTTP request object.

Returns:
    An optional SessionMixin object, indicating whether a session was successfully opened. If not implemented by subclasses, raises NotImplementedError.

Raises:
    NotImplementedError: If the method is not implemented by subclasses.
""""""",src/flask/sessions.py,223f05ba6a9f2fdf4bdbbb8072a3526458363344
0.5272236,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session cookie to the client's browser.

This method sets a session cookie based on the provided `app`, `session`, and `response` objects.
It determines the necessary cookie attributes (name, domain, path, secure, samesite, httponly) using
the `get_cookie_name`, `get_cookie_domain`, `get_cookie_path`, `get_cookie_secure`, 
`get_cookie_samesite`, and `get_cookie_httponly` methods.

Parameters:
    app (Flask): The Flask application instance.
    session (SessionMixin): The session object being saved.
    response (Response): The HTTP response object.

Returns:
    None
""""""",src/flask/sessions.py,223f05ba6a9f2fdf4bdbbb8072a3526458363344
0.51676315,def session_transaction,"""""""When used in combination with a ``with`` statement this opens a
        session transaction.  This can be used to modify the session that
        the test client uses.  Once the ``with`` block is left the session is
        stored back.

        ::

            with client.session_transaction() as session:
                session['value'] = 42

        Internally this is implemented by going through a temporary test
        request context and since session handling could depend on
        request variables this function accepts the same arguments as
        :meth:`~flask.Flask.test_request_context` which are directly
        passed through.
        """"""","""""""
Yield a session object for the current test request context.

This function is used to create and manage sessions for testing purposes.
It checks if cookies are enabled, sets up the WSGI context, opens a new session,
and saves it after use. If the session backend fails to open a session, a
RuntimeError is raised.

Args:
    *args: Variable length argument list containing any arguments passed to the test request context.
    **kwargs: Keyworded arguments for the test request context.

Returns:
    A generator yielding SessionMixin objects.
""""""",src/flask/testing.py,223f05ba6a9f2fdf4bdbbb8072a3526458363344
0.61847794,def make_null_session,"""""""Creates a null session which acts as a replacement object if the
        real session support could not be loaded due to a configuration
        error.  This mainly aids the user experience because the job of the
        null session is to still support lookup without complaining but
        modifications are answered with a helpful error message of what
        failed.

        This creates an instance of :attr:`null_session_class` by default.
        """"""","""""""
Creates and returns a null session instance for the given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    NullSession: A null session instance.

Raises:
    TypeError: If the provided `app` is not an instance of Flask.

Note:
This method creates a new instance of the `NullSession` class, which does not store any data. It is intended for use in testing or other scenarios where no session data needs to be stored.
""""""",src/flask/sessions.py,744c1fadf12fd096ea42055bbb90c396a71e0fd7
0.64614385,def get_cookie_domain,"""""""Returns the domain that should be set for the session cookie.

        Uses ``SESSION_COOKIE_DOMAIN`` if it is configured, otherwise
        falls back to detecting the domain based on ``SERVER_NAME``.

        Once detected (or if not set at all), ``SESSION_COOKIE_DOMAIN`` is
        updated to avoid re-running the logic.
        """"""","""""""
Returns the domain of the session cookie from a given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    str | None: The domain of the session cookie, or None if not set.
""""""",src/flask/sessions.py,744c1fadf12fd096ea42055bbb90c396a71e0fd7
0.7656,def get_cookie_secure,"""""""Returns True if the cookie should be secure.  This currently
        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.
        """"""","""""""
Returns whether the session cookie is secure.

This method checks if the `SESSION_COOKIE_SECURE` configuration variable
is set to True in the Flask application's configuration. If it is, the
session cookie will be transmitted over a secure protocol (HTTPS).

Args:
    app: The Flask application instance.

Returns:
    bool: Whether the session cookie is secure.
""""""",src/flask/sessions.py,744c1fadf12fd096ea42055bbb90c396a71e0fd7
0.5735377,def get_cookie_samesite,"""""""Return ``'Strict'`` or ``'Lax'`` if the cookie should use the
        ``SameSite`` attribute. This currently just returns the value of
        the :data:`SESSION_COOKIE_SAMESITE` setting.
        """"""","""""""
Returns the value of the `SESSION_COOKIE_SAMESITE` configuration option from the provided Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    str: The value of the `SESSION_COOKIE_SAMESITE` configuration option.
""""""",src/flask/sessions.py,744c1fadf12fd096ea42055bbb90c396a71e0fd7
0.5272236,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session cookie to the client's browser.

This method sets a session cookie based on the provided `app`, `session`, and `response` objects.
It determines the necessary cookie attributes (name, domain, path, secure, samesite, httponly) using
the `get_cookie_name`, `get_cookie_domain`, `get_cookie_path`, `get_cookie_secure`, 
`get_cookie_samesite`, and `get_cookie_httponly` methods.

Parameters:
    app (Flask): The Flask application instance.
    session (SessionMixin): The session object being saved.
    response (Response): The HTTP response object.

Returns:
    None
""""""",src/flask/sessions.py,744c1fadf12fd096ea42055bbb90c396a71e0fd7
0.61847806,def make_null_session,"""""""Creates a null session which acts as a replacement object if the
        real session support could not be loaded due to a configuration
        error.  This mainly aids the user experience because the job of the
        null session is to still support lookup without complaining but
        modifications are answered with a helpful error message of what
        failed.

        This creates an instance of :attr:`null_session_class` by default.
        """"""","""""""
Creates and returns a null session instance for the given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    NullSession: A null session instance.

Raises:
    TypeError: If the provided `app` is not an instance of Flask.

Note:
This method creates a new instance of the `NullSession` class, which does not store any data. It is intended for use in testing or other scenarios where no session data needs to be stored.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.6895287,def get_cookie_name,"""""""The name of the session cookie. Uses``app.config[""SESSION_COOKIE_NAME""]``.""""""","""""""
Returns the name of the cookie used to store session data in a Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    str: The name of the session cookie.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.59373665,def get_cookie_domain,"""""""The value of the ``Domain`` parameter on the session cookie. If not set,
        browsers will only send the cookie to the exact domain it was set from.
        Otherwise, they will send it to any subdomain of the given value as well.

        Uses the :data:`SESSION_COOKIE_DOMAIN` config.

        .. versionchanged:: 2.3
            Not set by default, does not fall back to ``SERVER_NAME``.
        """"""","""""""
Returns the domain of the session cookie from a given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    str | None: The domain of the session cookie, or None if not set.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.68853897,def get_cookie_path,"""""""Returns the path for which the cookie should be valid.  The
        default implementation uses the value from the ``SESSION_COOKIE_PATH``
        config var if it's set, and falls back to ``APPLICATION_ROOT`` or
        uses ``/`` if it's ``None``.
        """"""","""""""
Returns the path of the cookie used by a Flask application.

If 'SESSION_COOKIE_PATH' is set in the application's configuration,
its value will be returned. Otherwise, the value of
'APPLICATION_ROOT' will be used as a fallback.

Args:
    app (Flask): The Flask application instance.

Returns:
    str: The path of the cookie.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.7083045,def get_cookie_httponly,"""""""Returns True if the session cookie should be httponly.  This
        currently just returns the value of the ``SESSION_COOKIE_HTTPONLY``
        config var.
        """"""","""""""
Returns whether the session cookie is set to be HTTP-only in the given Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    bool: True if the session cookie is HTTP-only, False otherwise.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.7656,def get_cookie_secure,"""""""Returns True if the cookie should be secure.  This currently
        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.
        """"""","""""""
Returns whether the session cookie is secure.

This method checks if the `SESSION_COOKIE_SECURE` configuration variable
is set to True in the Flask application's configuration. If it is, the
session cookie will be transmitted over a secure protocol (HTTPS).

Args:
    app: The Flask application instance.

Returns:
    bool: Whether the session cookie is secure.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.5735377,def get_cookie_samesite,"""""""Return ``'Strict'`` or ``'Lax'`` if the cookie should use the
        ``SameSite`` attribute. This currently just returns the value of
        the :data:`SESSION_COOKIE_SAMESITE` setting.
        """"""","""""""
Returns the value of the `SESSION_COOKIE_SAMESITE` configuration option from the provided Flask application.

Args:
    app (Flask): The Flask application instance.

Returns:
    str: The value of the `SESSION_COOKIE_SAMESITE` configuration option.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.6405388,def get_expiration_time,"""""""A helper method that returns an expiration date for the session
        or ``None`` if the session is linked to the browser session.  The
        default implementation returns now + the permanent session
        lifetime configured on the application.
        """"""","""""""
Returns the expiration time of a Flask session.

If the session is permanent, returns the current UTC time plus the permanent session lifetime.
Otherwise, returns None.

Args:
    self: The instance of the class that this method belongs to (not used in this implementation).
    app: A Flask application object.
    session: A SessionMixin object representing the session.

Returns:
    datetime: The expiration time of the session, or None if the session is not permanent.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.56963253,def open_session,"""""""This is called at the beginning of each request, after
        pushing the request context, before matching the URL.

        This must return an object which implements a dictionary-like
        interface as well as the :class:`SessionMixin` interface.

        This will return ``None`` to indicate that loading failed in
        some way that is not immediately an error. The request
        context will fall back to using :meth:`make_null_session`
        in this case.
        """"""","""""""
Opens a new session for the given Flask application and request.

Args:
    - `app`: The Flask application instance.
    - `request`: The HTTP request object.

Returns:
    An optional SessionMixin object, indicating whether a session was successfully opened. If not implemented by subclasses, raises NotImplementedError.

Raises:
    NotImplementedError: If the method is not implemented by subclasses.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.47505915,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session.

This method is intended to be overridden by subclasses. It takes in the Flask application,
the session object, and the response object as parameters. The implementation of this
method should be provided by the subclass.

Parameters:
app (Flask): The Flask application instance.
session (SessionMixin): The session object.
response (Response): The response object.

Returns:
None

Raises:
NotImplementedError: This method is intended to be overridden and should not be called directly.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.49295735,def open_session,"""""""This is called at the beginning of each request, after
        pushing the request context, before matching the URL.

        This must return an object which implements a dictionary-like
        interface as well as the :class:`SessionMixin` interface.

        This will return ``None`` to indicate that loading failed in
        some way that is not immediately an error. The request
        context will fall back to using :meth:`make_null_session`
        in this case.
        """"""","""""""
Opens a new session for the given Flask application and request.

Args:
    app (Flask): The Flask application instance.
    request (Request): The HTTP request object.

Returns:
    t.Optional[SecureCookieSession]: The opened session, or None if creation fails.
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.5272236,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session cookie to the client's browser.

This method sets a session cookie based on the provided `app`, `session`, and `response` objects.
It determines the necessary cookie attributes (name, domain, path, secure, samesite, httponly) using
the `get_cookie_name`, `get_cookie_domain`, `get_cookie_path`, `get_cookie_secure`, 
`get_cookie_samesite`, and `get_cookie_httponly` methods.

Parameters:
    app (Flask): The Flask application instance.
    session (SessionMixin): The session object being saved.
    response (Response): The HTTP response object.

Returns:
    None
""""""",src/flask/sessions.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.52747554,def session_transaction,"""""""When used in combination with a ``with`` statement this opens a
        session transaction.  This can be used to modify the session that
        the test client uses.  Once the ``with`` block is left the session is
        stored back.

        ::

            with client.session_transaction() as session:
                session['value'] = 42

        Internally this is implemented by going through a temporary test
        request context and since session handling could depend on
        request variables this function accepts the same arguments as
        :meth:`~flask.Flask.test_request_context` which are directly
        passed through.
        """"""","""""""
Yield a session object for the current test request context.
        # new cookie interface for Werkzeug >= 2.3
        cookie_storage = self._cookies if hasattr(self, ""_cookies"") else self.cookie_jar

This function is used to create and manage sessions for testing purposes.
It checks if cookies are enabled, sets up the WSGI context, opens a new session,
and saves it after use. If the session backend fails to open a session, a
RuntimeError is raised.

Args:
    *args: Variable length argument list containing any arguments passed to the test request context.
    **kwargs: Keyworded arguments for the test request context.

Returns:
    A generator yielding SessionMixin objects.
""""""",src/flask/testing.py,14556fb1a14c99913ff4b2895e4cf683d6b3cc8d
0.65451866,def modules_tmp_path,"""""""A temporary directory added to sys.path.""""""","""""""
Returns a temporary path for modules.

This function creates a new directory at the specified `tmp_path` and prepends it to the system path using `sys.path_prepend`. The returned path is then used as the base for module imports.

Args:
    tmp_path (Path): The base path where the temporary directory will be created.
    monkeypatch (object): An object with a method to prepend the system path.

Returns:
    Path: The temporary path for modules.
""""""",tests/conftest.py,603a942068d1315ad16c03d6121fec61d243cb2c
0.6007905,def get_root_path,"""""""Find the root path of a package, or the path that contains a
    module. If it cannot be found, returns the current working
    directory.

    Not to be confused with the value returned by :func:`find_package`.

    :meta private:
    """"""","""""""
Returns the root path of the given module.

The function first checks if the module has already been imported and
has a file attribute. If so, it returns the directory of that file.
If not, it attempts to find the spec of the import using `importlib.util.find_spec`.
If the spec is found, it uses the loader's get_filename method to get the filepath.
If the filepath is None, it raises a RuntimeError.

Args:
    import_name (str): The name of the module to find the root path for.

Returns:
    str: The root path of the given module.

Raises:
    ValueError: If the spec is not found.
    RuntimeError: If no file path can be found for the module.
""""""",src/flask/helpers.py,9d47e4b50e0be86d524e23593bb41c0bf91ccce6
0.56479996,def send_file,"""""""Send the contents of a file to the client.

    The first argument can be a file path or a file-like object. Paths
    are preferred in most cases because Werkzeug can manage the file and
    get extra information from the path. Passing a file-like object
    requires that the file is opened in binary mode, and is mostly
    useful when building a file in memory with :class:`io.BytesIO`.

    Never pass file paths provided by a user. The path is assumed to be
    trusted, so a user could craft a path to access a file you didn't
    intend. Use :func:`send_from_directory` to safely serve
    user-requested paths from within a directory.

    If the WSGI server sets a ``file_wrapper`` in ``environ``, it is
    used, otherwise Werkzeug's built-in wrapper is used. Alternatively,
    if the HTTP server supports ``X-Sendfile``, configuring Flask with
    ``USE_X_SENDFILE = True`` will tell the server to send the given
    path, which is much more efficient than reading it in Python.

    :param path_or_file: The path to the file to send, relative to the
        current working directory if a relative path is given.
        Alternatively, a file-like object opened in binary mode. Make
        sure the file pointer is seeked to the start of the data.
    :param mimetype: The MIME type to send for the file. If not
        provided, it will try to detect it from the file name.
    :param as_attachment: Indicate to a browser that it should offer to
        save the file instead of displaying it.
    :param download_name: The default name browsers will use when saving
        the file. Defaults to the passed file name.
    :param conditional: Enable conditional and range responses based on
        request headers. Requires passing a file path and ``environ``.
    :param etag: Calculate an ETag for the file, which requires passing
        a file path. Can also be a string to use instead.
    :param last_modified: The last modified time to send for the file,
        in seconds. If not provided, it will try to detect it from the
        file path.
    :param max_age: How long the client should cache the file, in
        seconds. If set, ``Cache-Control`` will be ``public``, otherwise
        it will be ``no-cache`` to prefer conditional caching.

    .. versionchanged:: 2.0
        ``download_name`` replaces the ``attachment_filename``
        parameter. If ``as_attachment=False``, it is passed with
        ``Content-Disposition: inline`` instead.

    .. versionchanged:: 2.0
        ``max_age`` replaces the ``cache_timeout`` parameter.
        ``conditional`` is enabled and ``max_age`` is not set by
        default.

    .. versionchanged:: 2.0
        ``etag`` replaces the ``add_etags`` parameter. It can be a
        string to use instead of generating one.

    .. versionchanged:: 2.0
        Passing a file-like object that inherits from
        :class:`~io.TextIOBase` will raise a :exc:`ValueError` rather
        than sending an empty file.

    .. versionadded:: 2.0
        Moved the implementation to Werkzeug. This is now a wrapper to
        pass some Flask-specific arguments.

    .. versionchanged:: 1.1
        ``filename`` may be a :class:`~os.PathLike` object.

    .. versionchanged:: 1.1
        Passing a :class:`~io.BytesIO` object supports range requests.

    .. versionchanged:: 1.0.3
        Filenames are encoded with ASCII instead of Latin-1 for broader
        compatibility with WSGI servers.

    .. versionchanged:: 1.0
        UTF-8 filenames as specified in :rfc:`2231` are supported.

    .. versionchanged:: 0.12
        The filename is no longer automatically inferred from file
        objects. If you want to use automatic MIME and etag support,
        pass a filename via ``filename_or_fp`` or
        ``attachment_filename``.

    .. versionchanged:: 0.12
        ``attachment_filename`` is preferred over ``filename`` for MIME
        detection.

    .. versionchanged:: 0.9
        ``cache_timeout`` defaults to
        :meth:`Flask.get_send_file_max_age`.

    .. versionchanged:: 0.7
        MIME guessing and etag support for file-like objects was
        removed because it was unreliable. Pass a filename if you are
        able to, otherwise attach an etag yourself.

    .. versionchanged:: 0.5
        The ``add_etags``, ``cache_timeout`` and ``conditional``
        parameters were added. The default behavior is to add etags.

    .. versionadded:: 0.2
    """"""","""""""
Sends a file to the client.

This function is used to send files from the server to the client. It takes various parameters
to customize the behavior of the file sending process, such as the MIME type, whether to send
the file as an attachment, and the last modified date of the file.

Parameters:
- path_or_file (os.PathLike[t.AnyStr] | str | t.BinaryIO): The path or file-like object containing the data to be sent.
- mimetype (str | None): The MIME type of the file. Defaults to None.
- as_attachment (bool): Whether to send the file as an attachment. Defaults to False.
- download_name (str | None): The name of the downloaded file. Defaults to None.
- conditional (bool): Whether to check for a conditional GET request. Defaults to True.
- etag (bool | str): Whether to include the ETag in the response headers or its value as a string. Defaults to True.
- last_modified (datetime | int | float | None): The last modified date of the file. Defaults to None.
- max_age (None | (int | t.Callable[[str | None], int | None])): The maximum age of the cached response in seconds. Defaults to None.

Returns:
- Response: The HTTP response object containing the sent file data.
""""""",src/flask/helpers.py,bcdf9a2c2f03f665ceea2e39676a019779abf8fc
0.5720188,def make_response,"""""""Sometimes it is necessary to set additional headers in a view.  Because
    views do not have to return response objects but can return a value that
    is converted into a response object by Flask itself, it becomes tricky to
    add headers to it.  This function can be called instead of using a return
    and you will get a response object which you can use to attach headers.

    If view looked like this and you want to add a new header::

        def index():
            return render_template('index.html', foo=42)

    You can now do something like this::

        def index():
            response = make_response(render_template('index.html', foo=42))
            response.headers['X-Parachutes'] = 'parachutes are cool'
            return response

    This function accepts the very same arguments you can return from a
    view function.  This for example creates a response with a 404 error
    code::

        response = make_response(render_template('not_found.html'), 404)

    The other use case of this function is to force the return value of a
    view function into a response which is helpful with view
    decorators::

        response = make_response(view_function())
        response.headers['X-Parachutes'] = 'parachutes are cool'

    Internally this function does the following things:

    -   if no arguments are passed, it creates a new response argument
    -   if one argument is passed, :meth:`flask.Flask.make_response`
        is invoked with it.
    -   if more than one argument is passed, the arguments are passed
        to the :meth:`flask.Flask.make_response` function as tuple.

    .. versionadded:: 0.6
    """"""","""""""
Makes a response for the application.

This function takes any number of arguments, which are used to construct the response.
If no arguments are provided, it returns an empty response. If one argument is provided,
it is assumed to be a single value and is returned as-is. Otherwise, all arguments
are passed through to `current_app.make_response()`.

Args:
    *args: Any number of values to include in the response (optional)

Returns:
    Response: The constructed response object

Raises:
    None
""""""",src/flask/helpers.py,110c03b14bc495d7a13b44f261ac697c5ff0ee2e
0.6017961,def _validate_key,"""""""The ``--key`` option must be specified when ``--cert`` is a file.
    Modifies the ``cert`` param to be a ``(cert, key)`` pair if needed.
    """"""","""""""
Validate the key for a given certificate.

This function checks if the provided key is valid based on the type of certificate used.
It raises an error if the key is not required or if it's used with an invalid certificate type.

Args:
    ctx (click.Context): The context object containing the command-line arguments.
    param (click.Parameter): The parameter being validated.
    value: The value to be validated.

Returns:
    value: The validated key value.

Raises:
    click.BadParameter: If the key is not required or if it's used with an invalid certificate type.
""""""",src/flask/cli.py,f1cf027992f92b3176fb639af0a93305fb6bac59
0.5720188,def make_response,"""""""Sometimes it is necessary to set additional headers in a view.  Because
    views do not have to return response objects but can return a value that
    is converted into a response object by Flask itself, it becomes tricky to
    add headers to it.  This function can be called instead of using a return
    and you will get a response object which you can use to attach headers.

    If view looked like this and you want to add a new header::

        def index():
            return render_template('index.html', foo=42)

    You can now do something like this::

        def index():
            response = make_response(render_template('index.html', foo=42))
            response.headers['X-Parachutes'] = 'parachutes are cool'
            return response

    This function accepts the very same arguments you can return from a
    view function.  This for example creates a response with a 404 error
    code::

        response = make_response(render_template('not_found.html'), 404)

    The other use case of this function is to force the return value of a
    view function into a response which is helpful with view
    decorators::

        response = make_response(view_function())
        response.headers['X-Parachutes'] = 'parachutes are cool'

    Internally this function does the following things:

    -   if no arguments are passed, it creates a new response argument
    -   if one argument is passed, :meth:`flask.Flask.make_response`
        is invoked with it.
    -   if more than one argument is passed, the arguments are passed
        to the :meth:`flask.Flask.make_response` function as tuple.

    .. versionadded:: 0.6
    """"""","""""""
Makes a response for the application.

This function takes any number of arguments, which are used to construct the response.
If no arguments are provided, it returns an empty response. If one argument is provided,
it is assumed to be a single value and is returned as-is. Otherwise, all arguments
are passed through to `current_app.make_response()`.

Args:
    *args: Any number of values to include in the response (optional)

Returns:
    Response: The constructed response object

Raises:
    None
""""""",src/flask/helpers.py,f1cf027992f92b3176fb639af0a93305fb6bac59
0.5720188,def make_response,"""""""Sometimes it is necessary to set additional headers in a view.  Because
    views do not have to return response objects but can return a value that
    is converted into a response object by Flask itself, it becomes tricky to
    add headers to it.  This function can be called instead of using a return
    and you will get a response object which you can use to attach headers.

    If view looked like this and you want to add a new header::

        def index():
            return render_template('index.html', foo=42)

    You can now do something like this::

        def index():
            response = make_response(render_template('index.html', foo=42))
            response.headers['X-Parachutes'] = 'parachutes are cool'
            return response

    This function accepts the very same arguments you can return from a
    view function.  This for example creates a response with a 404 error
    code::

        response = make_response(render_template('not_found.html'), 404)

    The other use case of this function is to force the return value of a
    view function into a response which is helpful with view
    decorators::

        response = make_response(view_function())
        response.headers['X-Parachutes'] = 'parachutes are cool'

    Internally this function does the following things:

    -   if no arguments are passed, it creates a new response argument
    -   if one argument is passed, :meth:`flask.Flask.make_response`
        is invoked with it.
    -   if more than one argument is passed, the arguments are passed
        to the :meth:`flask.Flask.make_response` function as tuple.

    .. versionadded:: 0.6
    """"""","""""""
Makes a response for the application.

This function takes any number of arguments, which are used to construct the response.
If no arguments are provided, it returns an empty response. If one argument is provided,
it is assumed to be a single value and is returned as-is. Otherwise, all arguments
are passed through to `current_app.make_response()`.

Args:
    *args: Any number of values to include in the response (optional)

Returns:
    Response: The constructed response object

Raises:
    None
""""""",src/flask/helpers.py,1d2952befa0a0e5384a1e2ff68e94a0e0beee7b6
0.5720188,def make_response,"""""""Sometimes it is necessary to set additional headers in a view.  Because
    views do not have to return response objects but can return a value that
    is converted into a response object by Flask itself, it becomes tricky to
    add headers to it.  This function can be called instead of using a return
    and you will get a response object which you can use to attach headers.

    If view looked like this and you want to add a new header::

        def index():
            return render_template('index.html', foo=42)

    You can now do something like this::

        def index():
            response = make_response(render_template('index.html', foo=42))
            response.headers['X-Parachutes'] = 'parachutes are cool'
            return response

    This function accepts the very same arguments you can return from a
    view function.  This for example creates a response with a 404 error
    code::

        response = make_response(render_template('not_found.html'), 404)

    The other use case of this function is to force the return value of a
    view function into a response which is helpful with view
    decorators::

        response = make_response(view_function())
        response.headers['X-Parachutes'] = 'parachutes are cool'

    Internally this function does the following things:

    -   if no arguments are passed, it creates a new response argument
    -   if one argument is passed, :meth:`flask.Flask.make_response`
        is invoked with it.
    -   if more than one argument is passed, the arguments are passed
        to the :meth:`flask.Flask.make_response` function as tuple.

    .. versionadded:: 0.6
    """"""","""""""
Makes a response for the application.

This function takes any number of arguments, which are used to construct the response.
If no arguments are provided, it returns an empty response. If one argument is provided,
it is assumed to be a single value and is returned as-is. Otherwise, all arguments
are passed through to `current_app.make_response()`.

Args:
    *args: Any number of values to include in the response (optional)

Returns:
    Response: The constructed response object

Raises:
    None
""""""",src/flask/helpers.py,ac979acd6eed6c515bab85ea6add0bf4fe285956
0.5720188,def make_response,"""""""Sometimes it is necessary to set additional headers in a view.  Because
    views do not have to return response objects but can return a value that
    is converted into a response object by Flask itself, it becomes tricky to
    add headers to it.  This function can be called instead of using a return
    and you will get a response object which you can use to attach headers.

    If view looked like this and you want to add a new header::

        def index():
            return render_template('index.html', foo=42)

    You can now do something like this::

        def index():
            response = make_response(render_template('index.html', foo=42))
            response.headers['X-Parachutes'] = 'parachutes are cool'
            return response

    This function accepts the very same arguments you can return from a
    view function.  This for example creates a response with a 404 error
    code::

        response = make_response(render_template('not_found.html'), 404)

    The other use case of this function is to force the return value of a
    view function into a response which is helpful with view
    decorators::

        response = make_response(view_function())
        response.headers['X-Parachutes'] = 'parachutes are cool'

    Internally this function does the following things:

    -   if no arguments are passed, it creates a new response argument
    -   if one argument is passed, :meth:`flask.Flask.make_response`
        is invoked with it.
    -   if more than one argument is passed, the arguments are passed
        to the :meth:`flask.Flask.make_response` function as tuple.

    .. versionadded:: 0.6
    """"""","""""""
Makes a response for the application.

This function takes any number of arguments, which are used to construct the response.
If no arguments are provided, it returns an empty response. If one argument is provided,
it is assumed to be a single value and is returned as-is. Otherwise, all arguments
are passed through to `current_app.make_response()`.

Args:
    *args: Any number of values to include in the response (optional)

Returns:
    Response: The constructed response object

Raises:
    None
""""""",src/flask/helpers.py,0a8f4ea2e6fc8ab617dfd9356fe9f251458fae9a
0.5902456,def stream_with_context,"""""""Request contexts disappear when the response is started on the server.
    This is done for efficiency reasons and to make it less likely to encounter
    memory leaks with badly written WSGI middlewares.  The downside is that if
    you are using streamed responses, the generator cannot access request bound
    information any more.

    This function however can help you keep the context around for longer::

        from flask import stream_with_context, request, Response

        @app.route('/stream')
        def streamed_response():
            @stream_with_context
            def generate():
                yield 'Hello '
                yield request.args['name']
                yield '!'
            return Response(generate())

    Alternatively it can also be used around a specific generator::

        from flask import stream_with_context, request, Response

        @app.route('/stream')
        def streamed_response():
            def generate():
                yield 'Hello '
                yield request.args['name']
                yield '!'
            return Response(stream_with_context(generate()))

    .. versionadded:: 0.9
    """"""","""""""
Stream a generator or function with context.

This function takes an iterator or callable that returns an iterator, and wraps it in a context manager. The context manager pushes the current request context onto the stack when the generator is started, and pops it off when the iteration completes.

If the input is not an iterator, but rather a callable that returns an iterator, this function will wrap the callable in a decorator to create a new function that takes any arguments and returns an iterator. This allows the original function to be used as if it were an iterator.

The context manager uses the `_cv_request` object to get the current request context, and pushes it onto the stack when the generator is started. When the iteration completes, the context is popped off the stack.

This function can only be used when a request context is active, such as in a view function.

Args:
    generator_or_function: An iterator or callable that returns an iterator.

Returns:
    An iterator over the results of the input generator or function.
""""""",src/flask/helpers.py,f381f2dd595d8e4ef7cf1210605edee9c94beaa1
0.57201874,def make_response,"""""""Sometimes it is necessary to set additional headers in a view.  Because
    views do not have to return response objects but can return a value that
    is converted into a response object by Flask itself, it becomes tricky to
    add headers to it.  This function can be called instead of using a return
    and you will get a response object which you can use to attach headers.

    If view looked like this and you want to add a new header::

        def index():
            return render_template('index.html', foo=42)

    You can now do something like this::

        def index():
            response = make_response(render_template('index.html', foo=42))
            response.headers['X-Parachutes'] = 'parachutes are cool'
            return response

    This function accepts the very same arguments you can return from a
    view function.  This for example creates a response with a 404 error
    code::

        response = make_response(render_template('not_found.html'), 404)

    The other use case of this function is to force the return value of a
    view function into a response which is helpful with view
    decorators::

        response = make_response(view_function())
        response.headers['X-Parachutes'] = 'parachutes are cool'

    Internally this function does the following things:

    -   if no arguments are passed, it creates a new response argument
    -   if one argument is passed, :meth:`flask.Flask.make_response`
        is invoked with it.
    -   if more than one argument is passed, the arguments are passed
        to the :meth:`flask.Flask.make_response` function as tuple.

    .. versionadded:: 0.6
    """"""","""""""
Makes a response for the application.

This function takes any number of arguments, which are used to construct the response.
If no arguments are provided, it returns an empty response. If one argument is provided,
it is assumed to be a single value and is returned as-is. Otherwise, all arguments
are passed through to `current_app.make_response()`.

Args:
    *args: Any number of values to include in the response (optional)

Returns:
    Response: The constructed response object

Raises:
    None
""""""",src/flask/helpers.py,f381f2dd595d8e4ef7cf1210605edee9c94beaa1
0.5392463,def loads,"""""""Load data from a JSON string and deserialized any tagged objects.""""""","""""""
Loads and untags a given string.

This method takes a string as input, applies the `_untag_scan` function to it, 
and returns the result. The `_untag_scan` function is not defined in this snippet,
but it's assumed to be a part of the class instance (`self`) that this method belongs to.

Args:
    value (str): The input string to be loaded and untagged.

Returns:
    t.Any: The result of applying `_untag_scan` to the input string.
""""""",src/flask/json/tag.py,f381f2dd595d8e4ef7cf1210605edee9c94beaa1
0.5720188,def make_response,"""""""Sometimes it is necessary to set additional headers in a view.  Because
    views do not have to return response objects but can return a value that
    is converted into a response object by Flask itself, it becomes tricky to
    add headers to it.  This function can be called instead of using a return
    and you will get a response object which you can use to attach headers.

    If view looked like this and you want to add a new header::

        def index():
            return render_template('index.html', foo=42)

    You can now do something like this::

        def index():
            response = make_response(render_template('index.html', foo=42))
            response.headers['X-Parachutes'] = 'parachutes are cool'
            return response

    This function accepts the very same arguments you can return from a
    view function.  This for example creates a response with a 404 error
    code::

        response = make_response(render_template('not_found.html'), 404)

    The other use case of this function is to force the return value of a
    view function into a response which is helpful with view
    decorators::

        response = make_response(view_function())
        response.headers['X-Parachutes'] = 'parachutes are cool'

    Internally this function does the following things:

    -   if no arguments are passed, it creates a new response argument
    -   if one argument is passed, :meth:`flask.Flask.make_response`
        is invoked with it.
    -   if more than one argument is passed, the arguments are passed
        to the :meth:`flask.Flask.make_response` function as tuple.

    .. versionadded:: 0.6
    """"""","""""""
Makes a response for the application.

This function takes any number of arguments, which are used to construct the response.
If no arguments are provided, it returns an empty response. If one argument is provided,
it is assumed to be a single value and is returned as-is. Otherwise, all arguments
are passed through to `current_app.make_response()`.

Args:
    *args: Any number of values to include in the response (optional)

Returns:
    Response: The constructed response object

Raises:
    None
""""""",src/flask/helpers.py,2ce53a27f0d09a940191f2dd667360c1c03f7c1a
0.62879765,def get_send_file_max_age,"""""""Used by :func:`send_file` to determine the ``max_age`` cache
        value for a given file path if it wasn't passed.

        By default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from
        the configuration of :data:`~flask.current_app`. This defaults
        to ``None``, which tells the browser to use conditional requests
        instead of a timed cache, which is usually preferable.

        Note this is a duplicate of the same method in the Flask
        class.

        .. versionchanged:: 2.0
            The default configuration is ``None`` instead of 12 hours.

        .. versionadded:: 0.9
        """"""","""""""
Returns the maximum age in seconds for sending files.

If `filename` is provided, it will be used to retrieve the default send file max age from the application configuration.
Otherwise, the default value will be returned.

Args:
    filename (str | None): The name of the file to retrieve the default send file max age for. If None, the default value will be returned.

Returns:
    int | None: The maximum age in seconds for sending files, or None if no default value is set.
""""""",src/flask/app.py,b36820535d51b007c2551e9b65752754c632f573
0.4733784,def raise_routing_exception,"""""""Intercept routing exceptions and possibly do something else.

        In debug mode, intercept a routing redirect and replace it with
        an error if the body will be discarded.

        With modern Werkzeug this shouldn't occur, since it now uses a
        308 status which tells the browser to resend the method and
        body.

        .. versionchanged:: 2.1
            Don't intercept 307 and 308 redirects.

        :meta private:
        :internal:
        """"""","""""""
Raises a routing exception if the current request is not handled by the application.

If `self.debug` is False or the request does not have a valid redirect, and the redirect's code is 307 or 308, or if the request method is GET, HEAD, or OPTIONS, this function raises the original routing exception. Otherwise, it returns a FormDataRoutingRedirect instance for debugging purposes.

Args:
    request (Request): The current HTTP request.

Returns:
    t.NoReturn: This function does not return anything.
""""""",src/flask/app.py,b36820535d51b007c2551e9b65752754c632f573
0.634112,def update_template_context,"""""""Update the template context with some commonly used variables.
        This injects request, session, config and g into the template
        context as well as everything template context processors want
        to inject.  Note that the as of Flask 0.6, the original values
        in the context will not be overridden if a context processor
        decides to return a value with the same key.

        :param context: the context as a dictionary that is updated in place
                        to add extra variables.
        """"""","""""""
Updates the template context with additional information from request blueprints and context processors.

Args:
    context (dict[str, t.Any]): The initial template context to be updated.

Returns:
    None
""""""",src/flask/app.py,b36820535d51b007c2551e9b65752754c632f573
0.61209804,def handle_http_exception,"""""""Handles an HTTP exception.  By default this will invoke the
        registered error handlers and fall back to returning the
        exception as response.

        .. versionchanged:: 1.0.3
            ``RoutingException``, used internally for actions such as
             slash redirects during routing, is not passed to error
             handlers.

        .. versionchanged:: 1.0
            Exceptions are looked up by code *and* by MRO, so
            ``HTTPException`` subclasses can be handled with a catch-all
            handler for the base ``HTTPException``.

        .. versionadded:: 0.3
        """"""","""""""
Handles HTTP exceptions by checking their code and routing status.

If the exception does not have an error code (i.e., it's a ProxyException),
it returns the exception unchanged as an error. If the exception is a RoutingException,
it also returns it unchanged, as these are internal exceptions used to trigger routing actions.
Otherwise, it finds an error handler for the exception and calls it with the exception.

Args:
    e (HTTPException): The HTTP exception to handle.
Returns:
    HTTPException | ft.ResponseReturnValue: The handled exception or a ResponseReturnValue object.
""""""",src/flask/app.py,b36820535d51b007c2551e9b65752754c632f573
0.6346219,def handle_user_exception,"""""""This method is called whenever an exception occurs that
        should be handled. A special case is :class:`~werkzeug
        .exceptions.HTTPException` which is forwarded to the
        :meth:`handle_http_exception` method. This function will either
        return a response value or reraise the exception with the same
        traceback.

        .. versionchanged:: 1.0
            Key errors raised from request data like ``form`` show the
            bad key in debug mode rather than a generic bad request
            message.

        .. versionadded:: 0.7
        """"""","""""""
Handles exceptions raised by the application and returns an HTTPException or ResponseReturnValue.

If a BadRequestKeyError occurs and debug mode or the 'TRAP_BAD_REQUEST_ERRORS' configuration option is enabled,
the exception's show_exception attribute is set to True. If an HTTPException occurs but it is not trapped,
it is handled by the handle_http_exception method. Otherwise, the error handler for the given exception
is found using the _find_error_handler method and its result is returned.

Args:
    e (Exception): The exception to be handled.
Returns:
    HTTPException | ResponseReturnValue: The handled exception or response value.
Raises:
    Exception: If no error handler can be found for the exception.
""""""",src/flask/app.py,b36820535d51b007c2551e9b65752754c632f573
0.6539416,def ensure_sync,"""""""Ensure that the function is synchronous for WSGI workers.
        Plain ``def`` functions are returned as-is. ``async def``
        functions are wrapped to run and wait for the response.

        Override this method to change how the app runs async views.

        .. versionadded:: 2.0
        """"""","""""""
Ensures that a provided function is synchronous.

If the function is a coroutine, it is converted to a synchronous function using `async_to_sync`. Otherwise, the original function is returned.

Args:
    func (Callable[..., Any]): The function to be ensured as synchronous.

Returns:
    Callable[..., Any]: The synchronous version of the input function or the original function if it's already synchronous.
""""""",src/flask/app.py,b36820535d51b007c2551e9b65752754c632f573
0.58084154,def async_to_sync,"""""""Return a sync function that will run the coroutine function.

        .. code-block:: python

            result = app.async_to_sync(func)(*args, **kwargs)

        Override this method to change how the app converts async code
        to be synchronously callable.

        .. versionadded:: 2.0
        """"""","""""""
Converts an asynchronous function to a synchronous one.

This function takes an asynchronous function as input and returns a new function that can be called synchronously.
It uses the `async_to_sync` function from the `asgiref.sync` module, which is part of Flask's async support.

If the required `async` extra for Flask is not installed, a `RuntimeError` is raised with an error message.

Args:
    func: The asynchronous function to be converted. It should be a coroutine that takes any number of arguments and returns any type of value.

Returns:
    A new synchronous function that can be called with the same arguments as the original asynchronous function.
""""""",src/flask/app.py,b36820535d51b007c2551e9b65752754c632f573
0.596418,def preprocess_request,"""""""Called before the request is dispatched. Calls
        :attr:`url_value_preprocessors` registered with the app and the
        current blueprint (if any). Then calls :attr:`before_request_funcs`
        registered with the app and the blueprint.

        If any :meth:`before_request` handler returns a non-None value, the
        value is handled as if it was the return value from the view, and
        further request handling is stopped.
        """"""","""""""
Preprocesses the request by applying URL value preprocessors and before request functions.

This method iterates over the blueprint names in reverse order, applying any URL value preprocessors to each one.
It then iterates over the same list again, applying any before request functions to each one. If a function returns
a non-None value, it is returned immediately. Otherwise, None is returned at the end.

Args:
    self: The instance of the class this method belongs to.

Returns:
    ft.ResponseReturnValue | None: The result of the preprocess request, or None if no functions return a value.
""""""",src/flask/app.py,b36820535d51b007c2551e9b65752754c632f573
0.6385737,def request_context,"""""""Create a :class:`~flask.ctx.RequestContext` representing a
        WSGI environment. Use a ``with`` block to push the context,
        which will make :data:`request` point at this request.

        See :doc:`/reqcontext`.

        Typically you should not call this from your own code. A request
        context is automatically pushed by the :meth:`wsgi_app` when
        handling a request. Use :meth:`test_request_context` to create
        an environment and context instead of this method.

        :param environ: a WSGI environment
        """"""","""""""
Returns a new instance of RequestContext with the given WSGI environment.

Args:
    environ (WSGIEnvironment): The WSGI environment to use for the context.

Returns:
    RequestContext: A new instance of RequestContext initialized with the provided environment.
""""""",src/flask/app.py,b36820535d51b007c2551e9b65752754c632f573
0.58133,def wsgi_app,"""""""The actual WSGI application. This is not implemented in
        :meth:`__call__` so that middlewares can be applied without
        losing a reference to the app object. Instead of doing this::

            app = MyMiddleware(app)

        It's a better idea to do this instead::

            app.wsgi_app = MyMiddleware(app.wsgi_app)

        Then you still have the original application object around and
        can continue to call methods on it.

        .. versionchanged:: 0.7
            Teardown events for the request and app contexts are called
            even if an unhandled error occurs. Other events may not be
            called depending on when an error occurs during dispatch.
            See :ref:`callbacks-and-errors`.

        :param environ: A WSGI environment.
        :param start_response: A callable accepting a status code,
            a list of headers, and an optional exception context to
            start the response.
        """"""","""""""
WSGI Application Function.

This function serves as the entry point for the WSGI application, handling incoming requests and responses.
It takes in an environment dictionary (`environ`) and a start response callback (`start_response`), 
and returns an iterable of bytes representing the response to the request.

The function first creates a request context using `self.request_context(environ)`, which sets up the necessary
context for the application. It then attempts to dispatch the request, handling any exceptions that may occur.
If an exception is caught, it is handled by the `handle_exception` method and the response is generated accordingly.
Finally, the function returns the response, popping the context if no error occurred.

Note: This function uses a try-except block with a bare `except` clause to catch all exceptions. 
This is generally discouraged in favor of specific exception handling, but may be necessary for compatibility reasons.
""""""",src/flask/app.py,b36820535d51b007c2551e9b65752754c632f573
0.57510316,def __call__,"""""""The WSGI server calls the Flask application object as the
        WSGI application. This calls :meth:`wsgi_app`, which can be
        wrapped to apply middleware.
        """"""","""""""
Call the wsgi_app method to handle the request.

Args:
    environ (WSGIEnvironment): The environment in which the application is running.
    start_response (StartResponse): A callable that takes a response status code and headers as arguments.

Returns:
    cabc.Iterable[bytes]: An iterable of bytes representing the response body.
""""""",src/flask/app.py,b36820535d51b007c2551e9b65752754c632f573
0.62879765,def get_send_file_max_age,"""""""Used by :func:`send_file` to determine the ``max_age`` cache
        value for a given file path if it wasn't passed.

        By default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from
        the configuration of :data:`~flask.current_app`. This defaults
        to ``None``, which tells the browser to use conditional requests
        instead of a timed cache, which is usually preferable.

        Note this is a duplicate of the same method in the Flask
        class.

        .. versionchanged:: 2.0
            The default configuration is ``None`` instead of 12 hours.

        .. versionadded:: 0.9
        """"""","""""""
Returns the maximum age in seconds for sending files.

If `filename` is provided, it will be used to retrieve the default send file max age from the application configuration.
Otherwise, the default value will be returned.

Args:
    filename (str | None): The name of the file to retrieve the default send file max age for. If None, the default value will be returned.

Returns:
    int | None: The maximum age in seconds for sending files, or None if no default value is set.
""""""",src/flask/blueprints.py,b36820535d51b007c2551e9b65752754c632f573
0.6326439,def _called_with_wrong_args,"""""""Check whether calling a function raised a ``TypeError`` because
    the call failed or because something in the factory raised the
    error.

    :param f: The function that was called.
    :return: ``True`` if the call failed.
    """"""","""""""
Checks if a given Flask function was called with incorrect arguments.

Args:
    f (callable): The Flask function to check.

Returns:
    bool: True if the function was not called with correct arguments, False otherwise.
""""""",src/flask/cli.py,b36820535d51b007c2551e9b65752754c632f573
0.60839266,def prepare_import,"""""""Given a filename this will try to calculate the python path, add it
    to the search path and return the actual module name that is expected.
    """"""","""""""
Prepares the import path for a Python module.

This function takes a file path as input and returns the relative import path
for the corresponding module. It handles cases where the input path is within
a package structure, and adjusts the sys.path accordingly.

Args:
    path (str): The absolute or relative path to the Python module.

Returns:
    str: The relative import path for the module.
""""""",src/flask/cli.py,b36820535d51b007c2551e9b65752754c632f573
0.6143534,def load_app,"""""""Loads the Flask app (if not yet loaded) and returns it.  Calling
        this multiple times will just result in the already loaded app to
        be returned.
        """"""","""""""
Loads a Flask application instance.

This method attempts to load an existing Flask application from the `self._loaded_app` attribute,
or creates a new one if none exists. It also sets the debug flag of the loaded application
if `self.set_debug_flag` is True.

If no application can be found, it raises a `NoAppException`.

Returns:
    Flask: The loaded or created Flask application instance.
""""""",src/flask/cli.py,b36820535d51b007c2551e9b65752754c632f573
0.6271221,def with_appcontext,"""""""Wraps a callback so that it's guaranteed to be executed with the
    script's application context.

    Custom commands (and their options) registered under ``app.cli`` or
    ``blueprint.cli`` will always have an app context available, this
    decorator is not required in that case.

    .. versionchanged:: 2.2
        The app context is active for subcommands as well as the
        decorated callback. The app context is always available to
        ``app.cli`` command and parameter callbacks.
    """"""","""""""
Decorates a function to run with the application context.

This decorator is used to ensure that functions decorated with it are executed within
the application's context. This can be useful for tasks such as database operations,
file I/O, or any other operation that requires access to the current application state.

The `with_appcontext` function takes a function `f` as an argument and returns the result of
invoking `f` with the application context. If the application context is not already set,
it will load the application from the `ScriptInfo` object associated with the click context.

Args:
    f (function): The function to be decorated.

Returns:
    function: The original function, wrapped in a decorator that runs it with the application context.
""""""",src/flask/cli.py,b36820535d51b007c2551e9b65752754c632f573
0.61718327,def load_dotenv,"""""""Load ""dotenv"" files in order of precedence to set environment variables.

    If an env var is already set it is not overwritten, so earlier files in the
    list are preferred over later files.

    This is a no-op if `python-dotenv`_ is not installed.

    .. _python-dotenv: https://github.com/theskumar/python-dotenv#readme

    :param path: Load the file at this location instead of searching.
    :return: ``True`` if a file was loaded.

    .. versionchanged:: 2.0
        The current directory is not changed to the location of the
        loaded file.

    .. versionchanged:: 2.0
        When loading the env files, set the default encoding to UTF-8.

    .. versionchanged:: 1.1.0
        Returns ``False`` when python-dotenv is not installed, or when
        the given path isn't a file.

    .. versionadded:: 1.0
    """"""","""""""
Loads environment variables from a .env or .flaskenv file.

If no specific path is provided, it will attempt to load the default files
in the current working directory. If neither a specific path nor default
files are found, it will print a tip message suggesting installing python-dotenv.

Args:
    path (str | os.PathLike[str] | None): The path to the .env or .flaskenv file.
        If None, it will attempt to load the default files in the current working directory.

Returns:
    bool: True if at least one file was located and loaded, False otherwise.
""""""",src/flask/cli.py,b36820535d51b007c2551e9b65752754c632f573
0.56629413,def show_server_banner,"""""""Show extra startup messages the first time the server is run,
    ignoring the reloader.
    """"""","""""""
Show server banner based on debug mode and application import path.

This function displays a banner indicating whether the application is being served
and, if so, its import path. It also indicates whether debug mode is enabled.

Args:
    - debug (bool): Whether to display debug mode information.
    - app_import_path (str | None): The path to the imported Flask application.

Returns:
    None
""""""",src/flask/cli.py,b36820535d51b007c2551e9b65752754c632f573
0.60179603,def _validate_key,"""""""The ``--key`` option must be specified when ``--cert`` is a file.
    Modifies the ``cert`` param to be a ``(cert, key)`` pair if needed.
    """"""","""""""
Validate the key for a given certificate.

This function checks if the provided key is valid based on the type of certificate used.
It raises an error if the key is not required or if it's used with an invalid certificate type.

Args:
    ctx (click.Context): The context object containing the command-line arguments.
    param (click.Parameter): The parameter being validated.
    value: The value to be validated.

Returns:
    value: The validated key value.

Raises:
    click.BadParameter: If the key is not required or if it's used with an invalid certificate type.
""""""",src/flask/cli.py,b36820535d51b007c2551e9b65752754c632f573
0.64383364,def shell_command,"""""""Run an interactive Python shell in the context of a given
    Flask application.  The application will populate the default
    namespace of this shell according to its configuration.

    This is useful for executing small snippets of management code
    without having to manually configure the application.
    """"""","""""""
Run a Python shell with customized banner and interactive hook.

This function sets up a Python shell with a custom banner displaying the
Python version, platform, application name, and instance path. It also
supports setting an interactive hook to customize the readline experience,
such as tab completion.

Args:
    None

Returns:
    None
""""""",src/flask/cli.py,b36820535d51b007c2551e9b65752754c632f573
0.55731934,def from_pyfile,"""""""Updates the values in the config from a Python file.  This function
        behaves as if the file was imported as module with the
        :meth:`from_object` function.

        :param filename: the filename of the config.  This can either be an
                         absolute filename or a filename relative to the
                         root path.
        :param silent: set to ``True`` if you want silent failure for missing
                       files.
        :return: ``True`` if the file was loaded successfully.

        .. versionadded:: 0.7
           `silent` parameter.
        """"""","""""""
Loads a configuration from a Python file.

This function reads the contents of a specified Python file, executes it as a module,
and then calls `from_object` on the resulting object. If the file does not exist or
cannot be executed for some reason, an error is raised.

Args:
    filename (str | os.PathLike[str]): The path to the configuration file.
    silent (bool): If True, returns False if the file cannot be loaded without raising an exception. Defaults to False.

Returns:
    bool: Whether the configuration was successfully loaded.
""""""",src/flask/config.py,b36820535d51b007c2551e9b65752754c632f573
0.5459974,def from_file,"""""""Update the values in the config from a file that is loaded
        using the ``load`` parameter. The loaded data is passed to the
        :meth:`from_mapping` method.

        .. code-block:: python

            import json
            app.config.from_file(""config.json"", load=json.load)

            import tomllib
            app.config.from_file(""config.toml"", load=tomllib.load, text=False)

        :param filename: The path to the data file. This can be an
            absolute path or relative to the config root path.
        :param load: A callable that takes a file handle and returns a
            mapping of loaded data from the file.
        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``
            implements a ``read`` method.
        :param silent: Ignore the file if it doesn't exist.
        :param text: Open the file in text or binary mode.
        :return: ``True`` if the file was loaded successfully.

        .. versionchanged:: 2.3
            The ``text`` parameter was added.

        .. versionadded:: 2.0
        """"""","""""""
Loads a configuration file from disk.

This method attempts to open the specified file and load its contents using the provided
`load` function. If successful, it returns `True`. Otherwise, it raises an exception with a
customized error message if silent mode is enabled or returns `False`.

Args:
    filename (str | os.PathLike[str]): The path to the configuration file.
    load (t.Callable[[t.IO[t.Any]], t.Mapping[str, t.Any]]): A function that takes an IO object and returns a mapping of key-value pairs.
    silent (bool, optional): If True, exceptions are caught silently. Defaults to False.
    text (bool, optional): Specifies whether the file should be opened in text mode (True) or binary mode (False). Defaults to True.

Returns:
    bool: Whether the configuration was loaded successfully.
Raises:
    OSError: If an error occurs while loading the configuration file.
""""""",src/flask/config.py,b36820535d51b007c2551e9b65752754c632f573
0.60158515,def after_this_request,"""""""Executes a function after this request.  This is useful to modify
    response objects.  The function is passed the response object and has
    to return the same or a new one.

    Example::

        @app.route('/')
        def index():
            @after_this_request
            def add_header(response):
                response.headers['X-Foo'] = 'Parachute'
                return response
            return 'Hello World!'

    This is more useful if a function other than the view function wants to
    modify a response.  For instance think of a decorator that wants to add
    some headers without converting the return value into a response object.

    .. versionadded:: 0.9
    """"""","""""""
Returns a decorator that appends the provided callable to the list of functions 
to be executed after the current request has been completed.

Args:
    f (ft.AfterRequestCallable[t.Any]): The callable to be appended to the list.

Returns:
    ft.AfterRequestCallable[t.Any]: The decorated function.
Raises:
    RuntimeError: If no request context is active, indicating that 'after_this_request' 
                  can only be used when a request context is active, such as in a view function.
""""""",src/flask/ctx.py,b36820535d51b007c2551e9b65752754c632f573
0.5097036,def attach_enctype_error_multidict,"""""""Patch ``request.files.__getitem__`` to raise a descriptive error
    about ``enctype=multipart/form-data``.

    :param request: The request to patch.
    :meta private:
    """"""","""""""
Replaces the default behavior of Django's `request.files` with a multidict-based implementation.

When an error occurs while accessing a file, it will be raised as a `DebugFilesKeyError` instead of raising a `KeyError`. This allows for additional debugging information to be provided.

This function is intended to be used in conjunction with the `django.http.HttpRequest` class. It should not be called directly by external code.

Args:
    request (HttpRequest): The HTTP request object.

Returns:
    None
""""""",src/flask/debughelpers.py,b36820535d51b007c2551e9b65752754c632f573
0.5902456,def stream_with_context,"""""""Request contexts disappear when the response is started on the server.
    This is done for efficiency reasons and to make it less likely to encounter
    memory leaks with badly written WSGI middlewares.  The downside is that if
    you are using streamed responses, the generator cannot access request bound
    information any more.

    This function however can help you keep the context around for longer::

        from flask import stream_with_context, request, Response

        @app.route('/stream')
        def streamed_response():
            @stream_with_context
            def generate():
                yield 'Hello '
                yield request.args['name']
                yield '!'
            return Response(generate())

    Alternatively it can also be used around a specific generator::

        from flask import stream_with_context, request, Response

        @app.route('/stream')
        def streamed_response():
            def generate():
                yield 'Hello '
                yield request.args['name']
                yield '!'
            return Response(stream_with_context(generate()))

    .. versionadded:: 0.9
    """"""","""""""
Stream a generator or function with context.

This function takes an iterator or callable that returns an iterator, and wraps it in a context manager. The context manager pushes the current request context onto the stack when the generator is started, and pops it off when the iteration completes.

If the input is not an iterator, but rather a callable that returns an iterator, this function will wrap the callable in a decorator to create a new function that takes any arguments and returns an iterator. This allows the original function to be used as if it were an iterator.

The context manager uses the `_cv_request` object to get the current request context, and pushes it onto the stack when the generator is started. When the iteration completes, the context is popped off the stack.

This function can only be used when a request context is active, such as in a view function.

Args:
    generator_or_function: An iterator or callable that returns an iterator.

Returns:
    An iterator over the results of the input generator or function.
""""""",src/flask/helpers.py,b36820535d51b007c2551e9b65752754c632f573
0.6559336,def get_root_path,"""""""Find the root path of a package, or the path that contains a
    module. If it cannot be found, returns the current working
    directory.

    Not to be confused with the value returned by :func:`find_package`.

    :meta private:
    """"""","""""""
Returns the root path of the given imported module.

If the module has already been imported and its file attribute is available,
its directory path is returned. Otherwise, it attempts to find the loader
associated with the import specification and uses it to determine the root
path. If this fails, it falls back to using the current working directory.

Args:
    import_name (str): The name of the module for which to retrieve the root path.

Returns:
    str: The root path of the given imported module.
Raises:
    ValueError: If the loader is not found or if the module specification is None.
    RuntimeError: If no root path can be found for a namespace package.
""""""",src/flask/helpers.py,b36820535d51b007c2551e9b65752754c632f573
0.5981185,def jsonify,"""""""Serialize the given arguments as JSON, and return a
    :class:`~flask.Response` object with the ``application/json``
    mimetype. A dict or list returned from a view will be converted to a
    JSON response automatically without needing to call this.

    This requires an active request or application context, and calls
    :meth:`app.json.response() <flask.json.provider.JSONProvider.response>`.

    In debug mode, the output is formatted with indentation to make it
    easier to read. This may also be controlled by the provider.

    Either positional or keyword arguments can be given, not both.
    If no arguments are given, ``None`` is serialized.

    :param args: A single value to serialize, or multiple values to
        treat as a list to serialize.
    :param kwargs: Treat as a dict to serialize.

    .. versionchanged:: 2.2
        Calls ``current_app.json.response``, allowing an app to override
        the behavior.

    .. versionchanged:: 2.0.2
        :class:`decimal.Decimal` is supported by converting to a string.

    .. versionchanged:: 0.11
        Added support for serializing top-level arrays. This was a
        security risk in ancient browsers. See :ref:`security-json`.

    .. versionadded:: 0.2
    """"""","""""""
Returns a JSON response.

This function takes in any number of positional arguments and keyword arguments,
which are then passed to the `json` method of the current application instance.
The result is a JSON response object.

Args:
    *args (t.Any): Any positional arguments to be included in the response.
    **kwargs (t.Any): Any keyword arguments to be included in the response.

Returns:
    Response: A JSON response object.
""""""",src/flask/json/__init__.py,b36820535d51b007c2551e9b65752754c632f573
0.7430807,def tag,"""""""Convert the value to a valid JSON type and add the tag structure
        around it.""""""","""""""
Converts a given value to JSON format and returns it as a dictionary.

Args:
    value (t.Any): The value to be converted to JSON format.

Returns:
    dict[str, t.Any]: A dictionary containing the key-value pair where the key is 'tag' and the value is the JSON representation of the input value.
""""""",src/flask/json/tag.py,b36820535d51b007c2551e9b65752754c632f573
0.7066895,def tag,"""""""Convert a value to a tagged representation if necessary.""""""","""""""
Converts a given value to JSON format and returns it as a dictionary.

Args:
    value (t.Any): The value to be converted to JSON format.

Returns:
    dict[str, t.Any]: A dictionary containing the key-value pair where the key is 'tag' and the value is the JSON representation of the input value.
""""""",src/flask/json/tag.py,b36820535d51b007c2551e9b65752754c632f573
0.6471685,def register,"""""""Register a new tag with this serializer.

        :param tag_class: tag class to register. Will be instantiated with this
            serializer instance.
        :param force: overwrite an existing tag. If false (default), a
            :exc:`KeyError` is raised.
        :param index: index to insert the new tag in the tag order. Useful when
            the new tag is a special case of an existing tag. If ``None``
            (default), the tag is appended to the end of the order.

        :raise KeyError: if the tag key is already registered and ``force`` is
            not true.
        """"""","""""""
Registers a new JSON tag or inserts an existing one at the specified position in the order list.

Args:
    - `tag_class`: The class of the JSON tag to be registered.
    - `force` (optional): If True, forces registration even if the key already exists. Defaults to False.
    - `index` (optional): The index at which to insert the tag. If None, appends to the end of the order list.

Raises:
    KeyError: If the key is already registered and force is False.

Returns:
    None
""""""",src/flask/json/tag.py,b36820535d51b007c2551e9b65752754c632f573
0.5296718,def tag,"""""""Convert the value to a valid JSON type and add the tag structure
        around it.""""""","""""""
Returns the first matching tag from the order list.

If a match is found, it returns the corresponding tag's value. Otherwise, it returns the original input value.

Args:
    value (t.Any): The input value to be checked against the tags.

Returns:
    t.Any: The matched tag's value or the original input value.
""""""",src/flask/json/tag.py,b36820535d51b007c2551e9b65752754c632f573
0.58272654,def tag,"""""""Convert a value to a tagged representation if necessary.""""""","""""""
Returns the first matching tag from the order list.

If a match is found, it returns the corresponding tag's value. Otherwise, it returns the original input value.

Args:
    value (t.Any): The input value to be checked against the tags.

Returns:
    t.Any: The matched tag's value or the original input value.
""""""",src/flask/json/tag.py,b36820535d51b007c2551e9b65752754c632f573
0.6078941,def name,"""""""The name of the application.  This is usually the import name
        with the difference that it's guessed from the run file if the
        import name is main.  This name is used as a display name when
        Flask needs the name of the application.  It can be set and overridden
        to change the value.

        .. versionadded:: 0.8
        """"""","""""""
Returns the name of the current module or 'main' if running directly.

If running directly, attempts to retrieve the filename from sys.modules['__main__'].
If not found, returns '__main__'. Otherwise, returns the base filename without extension.

Args:
    None

Returns:
    str: The name of the current module or 'main'.
""""""",src/flask/sansio/app.py,b36820535d51b007c2551e9b65752754c632f573
0.5601262,def debug,"""""""Whether debug mode is enabled. When using ``flask run`` to start the
        development server, an interactive debugger will be shown for unhandled
        exceptions, and the server will be reloaded when code changes. This maps to the
        :data:`DEBUG` config key. It may not behave as expected if set late.

        **Do not enable debug mode when deploying in production.**

        Default: ``False``
        """"""","""""""
Returns whether the debug mode is enabled based on the configuration.

Args:
    None

Returns:
    bool: True if debug mode is enabled, False otherwise
""""""",src/flask/sansio/app.py,b36820535d51b007c2551e9b65752754c632f573
0.68007565,def inject_url_defaults,"""""""Injects the URL defaults for the given endpoint directly into
        the values dictionary passed.  This is used internally and
        automatically called on URL building.

        .. versionadded:: 0.7
        """"""","""""""
Injects URL defaults into the provided endpoint.

This function is used to inject default values from a dictionary into an endpoint.
It can be called outside of a request context and will parse the passed endpoint
to determine which blueprint it belongs to. It then calls the specified functions
for each name in the parsed path, passing the endpoint and values as arguments.

Args:
    endpoint (str): The URL endpoint to inject defaults into.
    values (dict[str, t.Any]): A dictionary of default values to inject.

Returns:
    None

Raises:
    ValueError: If the endpoint is not a valid URL.
""""""",src/flask/sansio/app.py,b36820535d51b007c2551e9b65752754c632f573
0.5729521,def add_url_rule,"""""""A helper method to register a rule (and optionally a view function)
        to the application.  The endpoint is automatically prefixed with the
        blueprint's name.
        """"""","""""""
Adds a URL rule to the application.

Parameters:
    rule (str): The URL pattern.
    endpoint (str | None, optional): The endpoint name. Defaults to None.
    view_func (ft.RouteCallable | None, optional): The view function. Defaults to None.
    **options (t.Any): Additional options for the URL rule.

Returns:
    None
""""""",src/flask/sansio/blueprints.py,b36820535d51b007c2551e9b65752754c632f573
0.70422304,def add_url_rule,"""""""Register a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for
        full documentation.

        The URL rule is prefixed with the blueprint's URL prefix. The endpoint name,
        used with :func:`url_for`, is prefixed with the blueprint's name.
        """"""","""""""
Adds a URL rule to the application.

Parameters:
    rule (str): The URL pattern.
    endpoint (str | None, optional): The endpoint name. Defaults to None.
    view_func (ft.RouteCallable | None, optional): The view function. Defaults to None.
    **options (t.Any): Additional options for the URL rule.

Returns:
    None
""""""",src/flask/sansio/blueprints.py,b36820535d51b007c2551e9b65752754c632f573
0.5981332,def record_once,"""""""Works like :meth:`record` but wraps the function in another
        function that will ensure the function is only called once.  If the
        blueprint is registered a second time on the application, the
        function passed is not called.
        """"""","""""""
Records a function to be executed once during the setup process.

This method is used to register a function that should only be executed once,
during the initial setup of the application. The function is wrapped in a
decorator to ensure it's only called once, even if the blueprint is reloaded.

Args:
    func (DeferredSetupFunction): The function to be recorded and executed.
    
Returns:
    None
""""""",src/flask/sansio/blueprints.py,b36820535d51b007c2551e9b65752754c632f573
0.6088417,def static_folder,"""""""The absolute path to the configured static folder. ``None``
        if no static folder is set.
        """"""","""""""
Sets the static folder path.

This method sets the path to the static folder. If a path is provided, it will be normalized and stripped of trailing slashes.

Args:
    value (str | os.PathLike[str] | None): The path to the static folder. Can be an absolute or relative path, or `None` for no static folder.

Returns:
    None
""""""",src/flask/sansio/scaffold.py,b36820535d51b007c2551e9b65752754c632f573
0.6828362,def get_cookie_name,"""""""The name of the session cookie. Uses``app.config[""SESSION_COOKIE_NAME""]``.""""""","""""""
Returns the name of the cookie used by the given Flask application for session management.

Args:
    app (Flask): The Flask application instance.

Returns:
    str: The name of the session cookie.
""""""",src/flask/sessions.py,b36820535d51b007c2551e9b65752754c632f573
0.63466686,def get_cookie_domain,"""""""The value of the ``Domain`` parameter on the session cookie. If not set,
        browsers will only send the cookie to the exact domain it was set from.
        Otherwise, they will send it to any subdomain of the given value as well.

        Uses the :data:`SESSION_COOKIE_DOMAIN` config.

        .. versionchanged:: 2.3
            Not set by default, does not fall back to ``SERVER_NAME``.
        """"""","""""""
Returns the domain of the session cookie.

This method retrieves the value of the `SESSION_COOKIE_DOMAIN` configuration
variable from the provided Flask application instance. If no such variable is set,
the function returns `None`.

Args:
    app (Flask): The Flask application instance to retrieve the cookie domain from.

Returns:
    str | None: The domain of the session cookie, or `None` if not set.
""""""",src/flask/sessions.py,b36820535d51b007c2551e9b65752754c632f573
0.6876436,def get_cookie_path,"""""""Returns the path for which the cookie should be valid.  The
        default implementation uses the value from the ``SESSION_COOKIE_PATH``
        config var if it's set, and falls back to ``APPLICATION_ROOT`` or
        uses ``/`` if it's ``None``.
        """"""","""""""
Returns the path of the cookie for a given Flask application.

The function checks if `SESSION_COOKIE_PATH` is set in the application's configuration.
If it is, that value is returned. Otherwise, it falls back to using `APPLICATION_ROOT`.

Args:
    app (Flask): The Flask application instance.

Returns:
    str: The path of the cookie for the given application.
""""""",src/flask/sessions.py,b36820535d51b007c2551e9b65752754c632f573
0.6981503,def get_cookie_httponly,"""""""Returns True if the session cookie should be httponly.  This
        currently just returns the value of the ``SESSION_COOKIE_HTTPONLY``
        config var.
        """"""","""""""
Returns whether the session cookie is set to be HTTP-only.

Args:
    app (Flask): The application instance.

Returns:
    bool: True if the session cookie is HTTP-only, False otherwise.
""""""",src/flask/sessions.py,b36820535d51b007c2551e9b65752754c632f573
0.73201877,def get_cookie_secure,"""""""Returns True if the cookie should be secure.  This currently
        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.
        """"""","""""""
Returns whether the session cookie is secure.

This method checks if the `SESSION_COOKIE_SECURE` configuration variable
is set to True in the provided Flask application. If it is, the function
returns True; otherwise, it returns False.

Args:
    app (Flask): The Flask application instance to check.

Returns:
    bool: Whether the session cookie is secure.
""""""",src/flask/sessions.py,b36820535d51b007c2551e9b65752754c632f573
0.556263,def get_cookie_samesite,"""""""Return ``'Strict'`` or ``'Lax'`` if the cookie should use the
        ``SameSite`` attribute. This currently just returns the value of
        the :data:`SESSION_COOKIE_SAMESITE` setting.
        """"""","""""""
Returns the value of the 'SESSION_COOKIE_SAMESITE' configuration option from the provided Flask application.

Args:
    app (Flask): The Flask application instance to retrieve the configuration from.

Returns:
    str | None: The value of the 'SESSION_COOKIE_SAMESITE' configuration option, or None if it is not set.
""""""",src/flask/sessions.py,b36820535d51b007c2551e9b65752754c632f573
0.5265649,def session_transaction,"""""""When used in combination with a ``with`` statement this opens a
        session transaction.  This can be used to modify the session that
        the test client uses.  Once the ``with`` block is left the session is
        stored back.

        ::

            with client.session_transaction() as session:
                session['value'] = 42

        Internally this is implemented by going through a temporary test
        request context and since session handling could depend on
        request variables this function accepts the same arguments as
        :meth:`~flask.Flask.test_request_context` which are directly
        passed through.
        """"""","""""""
Yield a session object for the current test request context.

This function is used to create and manage sessions for testing purposes.
It checks if cookies are enabled, sets them up, opens a new session,
and saves it after use. If the session backend fails to open a session,
it raises a RuntimeError.

Args:
    *args: Variable arguments passed to the test request context.
    **kwargs: Keyword arguments passed to the test request context.

Returns:
    An iterator yielding SessionMixin objects for each session opened.
""""""",src/flask/testing.py,b36820535d51b007c2551e9b65752754c632f573
0.61701155,def invoke,"""""""Invokes a CLI command in an isolated environment. See
        :meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for
        full method documentation. See :ref:`testing-cli` for examples.

        If the ``obj`` argument is not given, passes an instance of
        :class:`~flask.cli.ScriptInfo` that knows how to load the Flask
        app being tested.

        :param cli: Command object to invoke. Default is the app's
            :attr:`~flask.app.Flask.cli` group.
        :param args: List of strings to invoke the command with.

        :return: a :class:`~click.testing.Result` object.
        """"""","""""""
Invokes the parent class's invoke method with optional CLI and arguments.

This function is used to initialize the script info object and pass it to the parent class's invoke method.
If no 'obj' key is provided in kwargs, a ScriptInfo object is created with a create_app lambda that returns the app instance.

Args:
    cli (t.Any): The command line interface. Defaults to self.app.cli if None.
    args (t.Any): Any additional arguments. Defaults to None.
    **kwargs (t.Any): Additional keyword arguments. Must include 'obj' key.

Returns:
    t.Any: The result of the parent class's invoke method.
""""""",src/flask/testing.py,b36820535d51b007c2551e9b65752754c632f573
0.53093755,def max_content_length,"""""""Read-only view of the ``MAX_CONTENT_LENGTH`` config key.""""""","""""""
Returns the maximum allowed content length for the application.

If `current_app` is available, it returns the value from `current_app.config[""MAX_CONTENT_LENGTH""]`.
Otherwise, it returns `None`.

Args:
    None

Returns:
    int | None: The maximum allowed content length or None if not configured.
""""""",src/flask/wrappers.py,b36820535d51b007c2551e9b65752754c632f573
0.62712204,def with_appcontext,"""""""Wraps a callback so that it's guaranteed to be executed with the
    script's application context.

    Custom commands (and their options) registered under ``app.cli`` or
    ``blueprint.cli`` will always have an app context available, this
    decorator is not required in that case.

    .. versionchanged:: 2.2
        The app context is active for subcommands as well as the
        decorated callback. The app context is always available to
        ``app.cli`` command and parameter callbacks.
    """"""","""""""
Decorates a function to run with the application context.

This decorator is used to ensure that functions decorated with it are executed within
the application's context. This can be useful for tasks such as database operations,
file I/O, or any other operation that requires access to the current application state.

The `with_appcontext` function takes a function `f` as an argument and returns the result of
invoking `f` with the application context. If the application context is not already set,
it will load the application from the `ScriptInfo` object associated with the click context.

Args:
    f (function): The function to be decorated.

Returns:
    function: The original function, wrapped in a decorator that runs it with the application context.
""""""",src/flask/cli.py,64712f525beb09fcd8ae56052b7c3081d35568ea
0.5981332,def record_once,"""""""Works like :meth:`record` but wraps the function in another
        function that will ensure the function is only called once.  If the
        blueprint is registered a second time on the application, the
        function passed is not called.
        """"""","""""""
Records a function to be executed once during the setup process.

This method is used to register a function that should only be executed once,
during the initial setup of the application. The function is wrapped in a
decorator to ensure it's only called once, even if the blueprint is reloaded.

Args:
    func (DeferredSetupFunction): The function to be recorded and executed.
    
Returns:
    None
""""""",src/flask/sansio/blueprints.py,64712f525beb09fcd8ae56052b7c3081d35568ea
0.61699253,def jinja_loader,"""""""The Jinja loader for this object's templates. By default this
        is a class :class:`jinja2.loaders.FileSystemLoader` to
        :attr:`template_folder` if it is set.

        .. versionadded:: 0.5
        """"""","""""""
Loads a Jinja template loader based on the presence of a template folder.

Returns:
    BaseLoader | None: A Jinja template loader instance if a template folder is present, otherwise None.
""""""",src/flask/sansio/scaffold.py,2a1d62f904f1a931cc155e7c9ac34638e190d46c
0.6934788,def test_jsonify_uuid_types,"""""""Test jsonify with uuid.UUID types""""""","""""""
Tests the JSONification of UUID types.

This function tests that a UUID object can be successfully serialized to JSON and deserialized back into a UUID object.

Parameters:
app (Flask application): The Flask application instance.
client (Flask client): The Flask client instance.

Returns:
None
""""""",tests/test_json.py,30e153f81ce882c3b184a9429a248c6f89af6be4
0.6934788,def test_jsonify_uuid_types,"""""""Test jsonify with uuid.UUID types""""""","""""""
Tests the JSONification of UUID types.

This function tests that a UUID object can be successfully serialized to JSON and deserialized back into a UUID object.

Parameters:
app (Flask application): The Flask application instance.
client (Flask client): The Flask client instance.

Returns:
None
""""""",tests/test_json.py,79de93c969fae20305a759b31b95f9d3506d3dc8
0.45890495,def _lazy_sha1,"""""""Don't access ``hashlib.sha1`` until runtime. FIPS builds may not include
    SHA-1, in which case the import and use as a default would fail before the
    developer can configure something else.
    """"""","""""""
Calculates the SHA-1 hash of a given string.

Args:
    string (bytes, optional): The input string to be hashed. Defaults to an empty byte string.

Returns:
    Any: The calculated SHA-1 hash as a bytes object.
""""""",src/flask/sessions.py,00c943ba18df7a94988f15356acbca27db1d0870
0.50601614,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session cookie to the client's browser.

This method sets a session cookie based on the provided `app`, `session`, and `response` objects.
It determines the necessary cookie attributes (name, domain, path, secure, samesite, httponly) using
the `get_cookie_name`, `get_cookie_domain`, `get_cookie_path`, `get_cookie_secure`, 
`get_cookie_samesite`, and `get_cookie_httponly` methods.

If the session was accessed at all, a ""Vary: Cookie"" header is added to the response.
If the session is modified or empty, the cookie is removed or not set respectively.
Otherwise, if the session should be set as a cookie according to the `should_set_cookie` method,
the necessary attributes are determined and the cookie is set.

Parameters:
app (Flask): The Flask application instance.
session (SessionMixin): The session object.
response (Response): The response object.

Returns:
None
""""""",src/flask/sessions.py,1fdd1e0c68c45fc37f7f048f0c757afcb962deca
0.5060162,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session cookie to the client's browser.

This method sets a session cookie based on the provided `app`, `session`, and `response` objects.
It determines the necessary cookie attributes (name, domain, path, secure, samesite, httponly) using
the `get_cookie_name`, `get_cookie_domain`, `get_cookie_path`, `get_cookie_secure`, 
`get_cookie_samesite`, and `get_cookie_httponly` methods.

If the session was accessed at all, a ""Vary: Cookie"" header is added to the response.
If the session is modified or empty, the cookie is removed or not set respectively.
Otherwise, if the session should be set as a cookie according to the `should_set_cookie` method,
the necessary attributes are determined and the cookie is set.

Parameters:
app (Flask): The Flask application instance.
session (SessionMixin): The session object.
response (Response): The response object.

Returns:
None
""""""",src/flask/sessions.py,67c430681c02fe02519ff6859afe2582ac422432
0.591367,def endpoint,"""""""The endpoint that matched the request URL.

        This will be ``None`` if matching failed or has not been
        performed yet.

        This in combination with :attr:`view_args` can be used to
        reconstruct the same URL or a modified URL.
        """"""","""""""
Returns the URL rule's endpoint if available, otherwise returns None.

Args:
    None

Returns:
    str | None: The URL rule's endpoint or None if not set.
""""""",src/flask/wrappers.py,67c430681c02fe02519ff6859afe2582ac422432
0.50601614,def save_session,"""""""This is called at the end of each request, after generating
        a response, before removing the request context. It is skipped
        if :meth:`is_null_session` returns ``True``.
        """"""","""""""
Saves a session cookie to the client's browser.

This method sets a session cookie based on the provided `app`, `session`, and `response` objects.
It determines the necessary cookie attributes (name, domain, path, secure, samesite, httponly) using
the `get_cookie_name`, `get_cookie_domain`, `get_cookie_path`, `get_cookie_secure`, 
`get_cookie_samesite`, and `get_cookie_httponly` methods.

If the session was accessed at all, a ""Vary: Cookie"" header is added to the response.
If the session is modified or empty, the cookie is removed or not set respectively.
Otherwise, if the session should be set as a cookie according to the `should_set_cookie` method,
the necessary attributes are determined and the cookie is set.

Parameters:
app (Flask): The Flask application instance.
session (SessionMixin): The session object.
response (Response): The response object.

Returns:
None
""""""",src/flask/sessions.py,2129af5b667e0ba825c8cdc66b42e50975c444bc
0.59024554,def stream_with_context,"""""""Request contexts disappear when the response is started on the server.
    This is done for efficiency reasons and to make it less likely to encounter
    memory leaks with badly written WSGI middlewares.  The downside is that if
    you are using streamed responses, the generator cannot access request bound
    information any more.

    This function however can help you keep the context around for longer::

        from flask import stream_with_context, request, Response

        @app.route('/stream')
        def streamed_response():
            @stream_with_context
            def generate():
                yield 'Hello '
                yield request.args['name']
                yield '!'
            return Response(generate())

    Alternatively it can also be used around a specific generator::

        from flask import stream_with_context, request, Response

        @app.route('/stream')
        def streamed_response():
            def generate():
                yield 'Hello '
                yield request.args['name']
                yield '!'
            return Response(stream_with_context(generate()))

    .. versionadded:: 0.9
    """"""","""""""
Stream a generator or function with context.

This function takes an iterator or callable that returns an iterator, and wraps it in a context manager. The context manager pushes the current request context onto the stack when the generator is started, and pops it off when the iteration completes.

If the input is not an iterator, but rather a callable that returns an iterator, this function will wrap the callable in a decorator to create a new function that takes any arguments and returns an iterator. This allows the original function to be used as if it were an iterator.

The context manager uses the `_cv_request` object to get the current request context, and pushes it onto the stack when the generator is started. When the iteration completes, the context is popped off the stack.

This function can only be used when a request context is active, such as in a view function.

Args:
    generator_or_function: An iterator or callable that returns an iterator.

Returns:
    An iterator over the results of the input generator or function.
""""""",src/flask/helpers.py,492351adfe9c16d4a8334d51c1cb17836ed50ac0
0.54186773,def stream_with_context,"""""""Request contexts disappear when the response is started on the server.
    This is done for efficiency reasons and to make it less likely to encounter
    memory leaks with badly written WSGI middlewares.  The downside is that if
    you are using streamed responses, the generator cannot access request bound
    information any more.

    This function however can help you keep the context around for longer::

        from flask import stream_with_context, request, Response

        @app.route('/stream')
        def streamed_response():
            @stream_with_context
            def generate():
                yield 'Hello '
                yield request.args['name']
                yield '!'
            return Response(generate())

    Alternatively it can also be used around a specific generator::

        from flask import stream_with_context, request, Response

        @app.route('/stream')
        def streamed_response():
            def generate():
                yield 'Hello '
                yield request.args['name']
                yield '!'
            return Response(stream_with_context(generate()))

    .. versionadded:: 0.9
    """"""","""""""
Stream a generator or function with context.

This function takes an iterator or callable that returns an iterator, and wraps it in a context manager. The context manager pushes the current request context onto the stack when the generator is started, and pops it off when the iteration completes.

If the input is not a generator or function, but rather a decorator factory, this function will create a new decorator that takes arguments and keyword arguments, calls the original function with those arguments, and then wraps the result in another context manager.

The `stream_with_context` function can only be used when a request context is active, such as in a view function. If no request context is available, it raises a RuntimeError.

Returns:
    An iterator that yields the same values as the original generator or function, but with the added benefit of being able to use the current request context.
    A callable that takes an iterator and returns an iterator, if the input was not a generator or function.
""""""",src/flask/helpers.py,53b536dbc04a552ff1542000147fc5abd300aa46
0.54186773,def stream_with_context,"""""""Request contexts disappear when the response is started on the server.
    This is done for efficiency reasons and to make it less likely to encounter
    memory leaks with badly written WSGI middlewares.  The downside is that if
    you are using streamed responses, the generator cannot access request bound
    information any more.

    This function however can help you keep the context around for longer::

        from flask import stream_with_context, request, Response

        @app.route('/stream')
        def streamed_response():
            @stream_with_context
            def generate():
                yield 'Hello '
                yield request.args['name']
                yield '!'
            return Response(generate())

    Alternatively it can also be used around a specific generator::

        from flask import stream_with_context, request, Response

        @app.route('/stream')
        def streamed_response():
            def generate():
                yield 'Hello '
                yield request.args['name']
                yield '!'
            return Response(stream_with_context(generate()))

    .. versionadded:: 0.9
    """"""","""""""
Stream a generator or function with context.

This function takes an iterator or callable that returns an iterator, and wraps it in a context manager. The context manager pushes the current request context onto the stack when the generator is started, and pops it off when the iteration completes.

If the input is not a generator or function, but rather a decorator factory, this function will create a new decorator that takes arguments and keyword arguments, calls the original function with those arguments, and then wraps the result in another context manager.

The `stream_with_context` function can only be used when a request context is active, such as in a view function. If no request context is available, it raises a RuntimeError.

Returns:
    An iterator that yields the same values as the original generator or function, but with the added benefit of being able to use the current request context.
    A callable that takes an iterator and returns an iterator, if the input was not a generator or function.
""""""",src/flask/helpers.py,483ed3ecc48651ae93cf78653252a95e32af89e3
0.54186773,def stream_with_context,"""""""Request contexts disappear when the response is started on the server.
    This is done for efficiency reasons and to make it less likely to encounter
    memory leaks with badly written WSGI middlewares.  The downside is that if
    you are using streamed responses, the generator cannot access request bound
    information any more.

    This function however can help you keep the context around for longer::

        from flask import stream_with_context, request, Response

        @app.route('/stream')
        def streamed_response():
            @stream_with_context
            def generate():
                yield 'Hello '
                yield request.args['name']
                yield '!'
            return Response(generate())

    Alternatively it can also be used around a specific generator::

        from flask import stream_with_context, request, Response

        @app.route('/stream')
        def streamed_response():
            def generate():
                yield 'Hello '
                yield request.args['name']
                yield '!'
            return Response(stream_with_context(generate()))

    .. versionadded:: 0.9
    """"""","""""""
Stream a generator or function with context.

This function takes an iterator or callable that returns an iterator, and wraps it in a context manager. The context manager pushes the current request context onto the stack when the generator is started, and pops it off when the iteration completes.

If the input is not a generator or function, but rather a decorator factory, this function will create a new decorator that takes arguments and keyword arguments, calls the original function with those arguments, and then wraps the result in another context manager.

The `stream_with_context` function can only be used when a request context is active, such as in a view function. If no request context is available, it raises a RuntimeError.

Returns:
    An iterator that yields the same values as the original generator or function, but with the added benefit of being able to use the current request context.
    A callable that takes an iterator and returns an iterator, if the input was not a generator or function.
""""""",src/flask/helpers.py,c7a87242e54ab59a9d444acaf5d9cb14d7d8de63
0.54186773,def stream_with_context,"""""""Request contexts disappear when the response is started on the server.
    This is done for efficiency reasons and to make it less likely to encounter
    memory leaks with badly written WSGI middlewares.  The downside is that if
    you are using streamed responses, the generator cannot access request bound
    information any more.

    This function however can help you keep the context around for longer::

        from flask import stream_with_context, request, Response

        @app.route('/stream')
        def streamed_response():
            @stream_with_context
            def generate():
                yield 'Hello '
                yield request.args['name']
                yield '!'
            return Response(generate())

    Alternatively it can also be used around a specific generator::

        from flask import stream_with_context, request, Response

        @app.route('/stream')
        def streamed_response():
            def generate():
                yield 'Hello '
                yield request.args['name']
                yield '!'
            return Response(stream_with_context(generate()))

    .. versionadded:: 0.9
    """"""","""""""
Stream a generator or function with context.

This function takes an iterator or callable that returns an iterator, and wraps it in a context manager. The context manager pushes the current request context onto the stack when the generator is started, and pops it off when the iteration completes.

If the input is not a generator or function, but rather a decorator factory, this function will create a new decorator that takes arguments and keyword arguments, calls the original function with those arguments, and then wraps the result in another context manager.

The `stream_with_context` function can only be used when a request context is active, such as in a view function. If no request context is available, it raises a RuntimeError.

Returns:
    An iterator that yields the same values as the original generator or function, but with the added benefit of being able to use the current request context.
    A callable that takes an iterator and returns an iterator, if the input was not a generator or function.
""""""",src/flask/helpers.py,cddf5e62974d95add9bbe4d96e1814e1eaf99191